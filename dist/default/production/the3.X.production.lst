

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 21 11:31:06 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 1.45
    46                           ; Generated 16/11/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F8722 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataBANK0
    81  001FB0                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for display_7_segment@F5548
    85  001FB0  003F               	dw	63
    86  001FB2  0006               	dw	6
    87  001FB4  005B               	dw	91
    88  001FB6  004F               	dw	79
    89  001FB8  0066               	dw	102
    90  001FBA  006D               	dw	109
    91  001FBC  007D               	dw	125
    92  001FBE  0007               	dw	7
    93  001FC0  007F               	dw	127
    94  001FC2  0067               	dw	103
    95  001FC4  0040               	dw	64
    96  001FC6  0000               	dw	0
    97  0000                     _ADRES	set	4035
    98  0000                     _TMR1	set	4046
    99  0000                     _TMR0	set	4054
   100  0000                     _ADCON0bits	set	4034
   101  0000                     _PORTBbits	set	3969
   102  0000                     _PORTEbits	set	3972
   103  0000                     _LATH	set	3984
   104  0000                     _LATJ	set	3985
   105  0000                     _INTCON2bits	set	4081
   106  0000                     _LATB	set	3978
   107  0000                     _PORTB	set	3969
   108  0000                     _T1CON	set	4045
   109  0000                     _T0CON	set	4053
   110  0000                     _INTCONbits	set	4082
   111  0000                     _ADCON2	set	4032
   112  0000                     _ADCON1	set	4033
   113  0000                     _ADCON0	set	4034
   114  0000                     _PORTJ	set	3976
   115  0000                     _PORTH	set	3975
   116  0000                     _PORTG	set	3974
   117  0000                     _PORTF	set	3973
   118  0000                     _PORTE	set	3972
   119  0000                     _PORTC	set	3970
   120  0000                     _PORTA	set	3968
   121  0000                     _TRISJ	set	3994
   122  0000                     _TRISH	set	3993
   123  0000                     _TRISG	set	3992
   124  0000                     _TRISF	set	3991
   125  0000                     _TRISE	set	3990
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISA	set	3986
   128  0000                     _PORTD	set	3971
   129  0000                     _TMR1ON	set	32360
   130  0000                     _TMR0ON	set	32431
   131  0000                     _ADON	set	32272
   132  0000                     _TMR1IF	set	31984
   133  0000                     _TMR0IF	set	32658
   134  0000                     _TMR0IE	set	32661
   135  0000                     _RBIF	set	32656
   136  0000                     _RBIE	set	32659
   137  0000                     _LATH0	set	31872
   138  0000                     _LATH1	set	31873
   139  0000                     _LATH2	set	31874
   140  0000                     _LATH3	set	31875
   141  0000                     _TRISE1	set	31921
   142  0000                     _TRISB0	set	31896
   143  0000                     _TRISB1	set	31897
   144  0000                     _TRISB3	set	31899
   145  0000                     _TRISB4	set	31900
   146  0000                     _TRISB7	set	31903
   147  0000                     _TRISB6	set	31902
   148  0000                     _TMR1IE	set	31976
   149  0000                     _ADIF	set	31990
   150  0000                     _ADIE	set	31982
   151  0000                     _TRISH4	set	31948
   152  0000                     _TRISD7	set	31919
   153  0000                     _TRISD6	set	31918
   154  0000                     _TRISD5	set	31917
   155  0000                     _TRISD4	set	31916
   156  0000                     _TRISB2	set	31898
   157  0000                     _TRISB5	set	31901
   158  0000                     _LATD7	set	31847
   159  0000                     _LATD6	set	31846
   160  0000                     _LATD5	set	31845
   161  0000                     _LATD4	set	31844
   162  0000                     _LATB2	set	31826
   163  0000                     _LATB5	set	31829
   164                           
   165                           	psect	smallconst
   166  001000                     __psmallconst:
   167                           	opt stack 0
   168  001000  00                 	db	0
   169  001001                     STR_4:
   170  001001  20                 	db	32
   171  001002  20                 	db	32
   172  001003  20                 	db	32
   173  001004  20                 	db	32
   174  001005  20                 	db	32
   175  001006  20                 	db	32
   176  001007  20                 	db	32
   177  001008  20                 	db	32
   178  001009  20                 	db	32
   179  00100A  20                 	db	32
   180  00100B  20                 	db	32
   181  00100C  20                 	db	32
   182  00100D  20                 	db	32
   183  00100E  20                 	db	32
   184  00100F  20                 	db	32
   185  001010  20                 	db	32
   186  001011  00                 	db	0
   187  001012                     STR_2:
   188  001012  20                 	db	32
   189  001013  24                 	db	36
   190  001014  24                 	db	36
   191  001015  24                 	db	36
   192  001016  24                 	db	36
   193  001017  24                 	db	36
   194  001018  24                 	db	36
   195  001019  24                 	db	36
   196  00101A  24                 	db	36
   197  00101B  24                 	db	36
   198  00101C  24                 	db	36
   199  00101D  24                 	db	36
   200  00101E  24                 	db	36
   201  00101F  24                 	db	36
   202  001020  24                 	db	36
   203  001021  20                 	db	32
   204  001022  00                 	db	0
   205  001023                     STR_1:
   206  001023  20                 	db	32
   207  001024  24                 	db	36
   208  001025  3E                 	db	62	;'>'
   209  001026  56                 	db	86	;'V'
   210  001027  65                 	db	101	;'e'
   211  001028  72                 	db	114	;'r'
   212  001029  79                 	db	121	;'y'
   213  00102A  20                 	db	32
   214  00102B  20                 	db	32
   215  00102C  53                 	db	83	;'S'
   216  00102D  61                 	db	97	;'a'
   217  00102E  66                 	db	102	;'f'
   218  00102F  65                 	db	101	;'e'
   219  001030  3C                 	db	60	;'<'
   220  001031  24                 	db	36
   221  001032  20                 	db	32
   222  001033  00                 	db	0
   223  001034                     STR_13:
   224  001034  20                 	db	32
   225  001035  45                 	db	69	;'E'
   226  001036  6E                 	db	110	;'n'
   227  001037  74                 	db	116	;'t'
   228  001038  65                 	db	101	;'e'
   229  001039  72                 	db	114	;'r'
   230  00103A  20                 	db	32
   231  00103B  70                 	db	112	;'p'
   232  00103C  69                 	db	105	;'i'
   233  00103D  6E                 	db	110	;'n'
   234  00103E  3A                 	db	58	;':'
   235  00103F  58                 	db	88	;'X'
   236  001040  58                 	db	88	;'X'
   237  001041  58                 	db	88	;'X'
   238  001042  58                 	db	88	;'X'
   239  001043  20                 	db	32
   240  001044  00                 	db	0
   241  001045                     STR_5:
   242  001045  20                 	db	32
   243  001046  54                 	db	84	;'T'
   244  001047  68                 	db	104	;'h'
   245  001048  65                 	db	101	;'e'
   246  001049  20                 	db	32
   247  00104A  6E                 	db	110	;'n'
   248  00104B  65                 	db	101	;'e'
   249  00104C  77                 	db	119	;'w'
   250  00104D  20                 	db	32
   251  00104E  70                 	db	112	;'p'
   252  00104F  69                 	db	105	;'i'
   253  001050  6E                 	db	110	;'n'
   254  001051  20                 	db	32
   255  001052  69                 	db	105	;'i'
   256  001053  73                 	db	115	;'s'
   257  001054  20                 	db	32
   258  001055  00                 	db	0
   259  001056                     STR_11:
   260  001056  53                 	db	83	;'S'
   261  001057  61                 	db	97	;'a'
   262  001058  66                 	db	102	;'f'
   263  001059  65                 	db	101	;'e'
   264  00105A  20                 	db	32
   265  00105B  69                 	db	105	;'i'
   266  00105C  73                 	db	115	;'s'
   267  00105D  20                 	db	32
   268  00105E  6F                 	db	111	;'o'
   269  00105F  70                 	db	112	;'p'
   270  001060  65                 	db	101	;'e'
   271  001061  6E                 	db	110	;'n'
   272  001062  69                 	db	105	;'i'
   273  001063  6E                 	db	110	;'n'
   274  001064  67                 	db	103	;'g'
   275  001065  21                 	db	33
   276  001066  00                 	db	0
   277  001067                     STR_12:
   278  001067  24                 	db	36
   279  001068  24                 	db	36
   280  001069  24                 	db	36
   281  00106A  24                 	db	36
   282  00106B  24                 	db	36
   283  00106C  24                 	db	36
   284  00106D  24                 	db	36
   285  00106E  24                 	db	36
   286  00106F  24                 	db	36
   287  001070  24                 	db	36
   288  001071  24                 	db	36
   289  001072  24                 	db	36
   290  001073  24                 	db	36
   291  001074  24                 	db	36
   292  001075  24                 	db	36
   293  001076  24                 	db	36
   294  001077  00                 	db	0
   295  001078                     STR_14:
   296  001078  54                 	db	84	;'T'
   297  001079  72                 	db	114	;'r'
   298  00107A  79                 	db	121	;'y'
   299  00107B  20                 	db	32
   300  00107C  61                 	db	97	;'a'
   301  00107D  66                 	db	102	;'f'
   302  00107E  74                 	db	116	;'t'
   303  00107F  65                 	db	101	;'e'
   304  001080  72                 	db	114	;'r'
   305  001081  20                 	db	32
   306  001082  32                 	db	50	;'2'
   307  001083  30                 	db	48	;'0'
   308  001084  73                 	db	115	;'s'
   309  001085  65                 	db	101	;'e'
   310  001086  63                 	db	99	;'c'
   311  001087  2E                 	db	46
   312  001088  00                 	db	0
   313  001089                     STR_3:
   314  001089  20                 	db	32
   315  00108A  53                 	db	83	;'S'
   316  00108B  65                 	db	101	;'e'
   317  00108C  74                 	db	116	;'t'
   318  00108D  20                 	db	32
   319  00108E  61                 	db	97	;'a'
   320  00108F  20                 	db	32
   321  001090  70                 	db	112	;'p'
   322  001091  69                 	db	105	;'i'
   323  001092  6E                 	db	110	;'n'
   324  001093  3A                 	db	58	;':'
   325  001094  00                 	db	0
   326  001095                     STR_8:
   327  001095  20                 	db	32
   328  001096  45                 	db	69	;'E'
   329  001097  6E                 	db	110	;'n'
   330  001098  74                 	db	116	;'t'
   331  001099  65                 	db	101	;'e'
   332  00109A  72                 	db	114	;'r'
   333  00109B  20                 	db	32
   334  00109C  70                 	db	112	;'p'
   335  00109D  69                 	db	105	;'i'
   336  00109E  6E                 	db	110	;'n'
   337  00109F  3A                 	db	58	;':'
   338  0010A0  00                 	db	0
   339  0010A1                     STR_9:
   340  0010A1  20                 	db	32
   341  0010A2  20                 	db	32
   342  0010A3  41                 	db	65	;'A'
   343  0010A4  74                 	db	116	;'t'
   344  0010A5  74                 	db	116	;'t'
   345  0010A6  65                 	db	101	;'e'
   346  0010A7  6D                 	db	109	;'m'
   347  0010A8  70                 	db	112	;'p'
   348  0010A9  74                 	db	116	;'t'
   349  0010AA  73                 	db	115	;'s'
   350  0010AB  3A                 	db	58	;':'
   351  0010AC  00                 	db	0
   352  0010AD                     STR_7:
   353  0010AD  2D                 	db	45
   354  0010AE  2D                 	db	45
   355  0010AF  2D                 	db	45
   356  0010B0  20                 	db	32
   357  0010B1  20                 	db	32
   358  0010B2  20                 	db	32
   359  0010B3  00                 	db	0
   360  0010B4                     STR_6:
   361  0010B4  20                 	db	32
   362  0010B5  20                 	db	32
   363  0010B6  20                 	db	32
   364  0010B7  2D                 	db	45
   365  0010B8  2D                 	db	45
   366  0010B9  2D                 	db	45
   367  0010BA  00                 	db	0
   368  0000                     
   369                           ; #config settings
   370  0010BB  00                 	db	0	; dummy byte at the end
   371  0000                     
   372                           	psect	cinit
   373  001DCE                     __pcinit:
   374                           	opt stack 0
   375  001DCE                     start_initialization:
   376                           	opt stack 0
   377  001DCE                     __initialization:
   378                           	opt stack 0
   379                           
   380                           ; Initialize objects allocated to BANK0 (24 bytes)
   381                           ; load TBLPTR registers with __pidataBANK0
   382  001DCE  0EB0               	movlw	low __pidataBANK0
   383  001DD0  6EF6               	movwf	tblptrl,c
   384  001DD2  0E1F               	movlw	high __pidataBANK0
   385  001DD4  6EF7               	movwf	tblptrh,c
   386  001DD6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   387  001DD8  6EF8               	movwf	tblptru,c
   388  001DDA  EE00  F0A0         	lfsr	0,__pdataBANK0
   389  001DDE  EE10 F018          	lfsr	1,24
   390  001DE2                     copy_data0:
   391  001DE2  0009               	tblrd		*+
   392  001DE4  CFF5 FFEE          	movff	tablat,postinc0
   393  001DE8  50E5               	movf	postdec1,w,c
   394  001DEA  50E1               	movf	fsr1l,w,c
   395  001DEC  E1FA               	bnz	copy_data0
   396                           
   397                           ; Clear objects allocated to BANK0 (26 bytes)
   398  001DEE  EE00  F086         	lfsr	0,__pbssBANK0
   399  001DF2  0E1A               	movlw	26
   400  001DF4                     clear_0:
   401  001DF4  6AEE               	clrf	postinc0,c
   402  001DF6  06E8               	decf	wreg,f,c
   403  001DF8  E1FD               	bnz	clear_0
   404                           
   405                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   406  001DFA  6A41               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   407                           
   408                           ; Clear objects allocated to COMRAM (26 bytes)
   409  001DFC  EE00  F027         	lfsr	0,__pbssCOMRAM
   410  001E00  0E1A               	movlw	26
   411  001E02                     clear_1:
   412  001E02  6AEE               	clrf	postinc0,c
   413  001E04  06E8               	decf	wreg,f,c
   414  001E06  E1FD               	bnz	clear_1
   415  001E08                     end_of_initialization:
   416                           	opt stack 0
   417  001E08                     __end_of__initialization:
   418                           	opt stack 0
   419  001E08  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   420  001E0A  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   421  001E0C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   422  001E0E  6EF8               	movwf	tblptru,c
   423  001E10  0E10               	movlw	high __Lsmallconst
   424  001E12  6EF7               	movwf	tblptrh,c
   425  001E14  0100               	movlb	0
   426  001E16  EFCB  F009         	goto	_main	;jump to C main() function
   427                           tblptru	equ	0xFF8
   428                           tblptrh	equ	0xFF7
   429                           tblptrl	equ	0xFF6
   430                           tablat	equ	0xFF5
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           postdec1	equ	0xFE5
   434                           fsr1l	equ	0xFE1
   435                           
   436                           	psect	bitbssCOMRAM
   437  000208                     __pbitbssCOMRAM:
   438                           	opt stack 0
   439  000208                     _isEnterPin:
   440                           	opt stack 0
   441  000208                     	ds	1
   442  000209                     _toggle:
   443                           	opt stack 0
   444  000209                     	ds	1
   445  00020A                     _line_toggle:
   446                           	opt stack 0
   447  00020A                     	ds	1
   448  00020B                     _isBlank:
   449                           	opt stack 0
   450  00020B                     	ds	1
   451  00020C                     _b6_pressed:
   452                           	opt stack 0
   453  00020C                     	ds	1
   454  00020D                     _pin_full:
   455                           	opt stack 0
   456  00020D                     	ds	1
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           postdec1	equ	0xFE5
   464                           fsr1l	equ	0xFE1
   465                           
   466                           	psect	bssCOMRAM
   467  000027                     __pbssCOMRAM:
   468                           	opt stack 0
   469  000027                     _blank_val:
   470                           	opt stack 0
   471  000027                     	ds	4
   472  00002B                     _attempt_num:
   473                           	opt stack 0
   474  00002B                     	ds	2
   475  00002D                     _flag20sec:
   476                           	opt stack 0
   477  00002D                     	ds	2
   478  00002F                     _flag120sec:
   479                           	opt stack 0
   480  00002F                     	ds	2
   481  000031                     _counter_120sec:
   482                           	opt stack 0
   483  000031                     	ds	2
   484  000033                     _val_inPot:
   485                           	opt stack 0
   486  000033                     	ds	2
   487  000035                     _diff_val2:
   488                           	opt stack 0
   489  000035                     	ds	2
   490  000037                     _pre_val_inPot:
   491                           	opt stack 0
   492  000037                     	ds	2
   493  000039                     _cur_val_inPot:
   494                           	opt stack 0
   495  000039                     	ds	2
   496  00003B                     _ADC_timer:
   497                           	opt stack 0
   498  00003B                     	ds	2
   499  00003D                     _blink_timer:
   500                           	opt stack 0
   501  00003D                     	ds	2
   502  00003F                     _counter_to_read_val:
   503                           	opt stack 0
   504  00003F                     	ds	2
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           postdec1	equ	0xFE5
   512                           fsr1l	equ	0xFE1
   513                           
   514                           	psect	bssBANK0
   515  000086                     __pbssBANK0:
   516                           	opt stack 0
   517  000086                     _entered_pass:
   518                           	opt stack 0
   519  000086                     	ds	8
   520  00008E                     _password_int:
   521                           	opt stack 0
   522  00008E                     	ds	8
   523  000096                     _timer_1sec:
   524                           	opt stack 0
   525  000096                     	ds	2
   526  000098                     _counter_20sec:
   527                           	opt stack 0
   528  000098                     	ds	2
   529  00009A                     _sh_pass_count:
   530                           	opt stack 0
   531  00009A                     	ds	2
   532  00009C                     _sh_pass_timer:
   533                           	opt stack 0
   534  00009C                     	ds	2
   535  00009E                     _diff_val:
   536                           	opt stack 0
   537  00009E                     	ds	2
   538                           tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           postdec1	equ	0xFE5
   545                           fsr1l	equ	0xFE1
   546                           
   547                           	psect	dataBANK0
   548  0000A0                     __pdataBANK0:
   549                           	opt stack 0
   550  0000A0                     display_7_segment@F5548:
   551                           	opt stack 0
   552  0000A0                     	ds	24
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1l	equ	0xFE1
   561                           
   562                           	psect	cstackBANK0
   563  000060                     __pcstackBANK0:
   564                           	opt stack 0
   565  000060                     display_7_segment@symbols:
   566                           	opt stack 0
   567                           
   568                           ; 24 bytes @ 0x0
   569  000060                     	ds	24
   570  000078                     display120sec_Int@a1:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x18
   574  000078                     	ds	2
   575  00007A                     display120sec_Int@a2:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x1A
   579  00007A                     	ds	2
   580  00007C                     display120sec_Int@a3:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x1C
   584  00007C                     	ds	2
   585  00007E                     display120sec_Int@a4:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x1E
   589  00007E                     	ds	2
   590  000080                     main@i:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x20
   594  000080                     	ds	2
   595  000082                     main@i_627:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x22
   599  000082                     	ds	2
   600  000084                     main@i_628:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x24
   604  000084                     	ds	2
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           postdec1	equ	0xFE5
   612                           fsr1l	equ	0xFE1
   613                           
   614                           	psect	cstackCOMRAM
   615  000001                     __pcstackCOMRAM:
   616                           	opt stack 0
   617  000001                     ?_val_inPot_2Int:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x0
   621  000001                     	ds	2
   622  000003                     ??_isr:
   623                           
   624                           ; 1 bytes @ 0x2
   625  000003                     	ds	20
   626  000017                     isr@i:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x16
   630  000017                     	ds	2
   631  000019                     ?_check_correct_pass:
   632                           	opt stack 0
   633  000019                     ?___lwdiv:
   634                           	opt stack 0
   635  000019                     WriteCommandToLCD@Command:
   636                           	opt stack 0
   637  000019                     WriteDataToLCD@LCDChar:
   638                           	opt stack 0
   639  000019                     init@i:
   640                           	opt stack 0
   641  000019                     display_7_segment@d0:
   642                           	opt stack 0
   643  000019                     num_to_char@x:
   644                           	opt stack 0
   645  000019                     ___lwdiv@dividend:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x18
   649  000019                     	ds	1
   650  00001A                     ??_InitLCD:
   651  00001A                     ??_ClearLCDScreen:
   652  00001A                     WriteStringToLCD@s:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x19
   656  00001A                     	ds	1
   657  00001B                     num_to_char@y:
   658                           	opt stack 0
   659  00001B                     init@i_530:
   660                           	opt stack 0
   661  00001B                     display_7_segment@d1:
   662                           	opt stack 0
   663  00001B                     ___lwdiv@divisor:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x1A
   667  00001B                     	ds	1
   668  00001C                     
   669                           ; 1 bytes @ 0x1B
   670  00001C                     	ds	1
   671  00001D                     ___lwdiv@counter:
   672                           	opt stack 0
   673  00001D                     display_7_segment@d2:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x1C
   677  00001D                     	ds	1
   678  00001E                     ___lwdiv@quotient:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x1D
   682  00001E                     	ds	1
   683  00001F                     display_7_segment@d3:
   684                           	opt stack 0
   685  00001F                     check_correct_pass@i:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x1E
   689  00001F                     	ds	1
   690  000020                     ?___lwmod:
   691                           	opt stack 0
   692  000020                     ___lwmod@dividend:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x1F
   696  000020                     	ds	1
   697  000021                     ??_display_7_segment:
   698                           
   699                           ; 1 bytes @ 0x20
   700  000021                     	ds	1
   701  000022                     ??_delay_3_sec:
   702  000022                     ___lwmod@divisor:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x21
   706  000022                     	ds	2
   707  000024                     ___lwmod@counter:
   708                           	opt stack 0
   709  000024                     delay_3_sec@c:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x23
   713  000024                     	ds	1
   714  000025                     
   715                           ; 1 bytes @ 0x24
   716  000025                     	ds	1
   717  000026                     ??_main:
   718                           
   719                           ; 1 bytes @ 0x25
   720  000026                     	ds	1
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           postdec1	equ	0xFE5
   728                           fsr1l	equ	0xFE1
   729                           
   730 ;;
   731 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   732 ;;
   733 ;; *************** function _main *****************
   734 ;; Defined at:
   735 ;;		line 535 in file "the3.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;		None
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  i               2   36[BANK0 ] unsigned int 
   740 ;;  i               2   34[BANK0 ] unsigned int 
   741 ;;  i               2   32[BANK0 ] int 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      void 
   744 ;; Registers used:
   745 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;Total ram usage:        7 bytes
   756 ;; Hardware stack levels required when called:    6
   757 ;; This function calls:
   758 ;;		_ClearLCDScreen
   759 ;;		_InitLCD
   760 ;;		_RE1button
   761 ;;		_check_correct_pass
   762 ;;		_delay_3_sec
   763 ;;		_display120sec_Int
   764 ;;		_display_7_segment
   765 ;;		_endLCD
   766 ;;		_enter_pin
   767 ;;		_first_message
   768 ;;		_init
   769 ;;		_next_char
   770 ;;		_next_char2
   771 ;;		_set_a_pin_message
   772 ;;		_show_password
   773 ;;		_write_wait_20sec
   774 ;; This function is called by:
   775 ;;		Startup code after reset
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text0
   780  001396                     __ptext0:
   781                           	opt stack 0
   782  001396                     _main:
   783                           	opt stack 25
   784                           
   785                           ;the3.c: 537: for(int i=0; i<5;i++)
   786                           
   787                           ;incstack = 0
   788  001396  0E00               	movlw	0
   789  001398  0100               	movlb	0	; () banked
   790  00139A  6F81               	movwf	(main@i+1)& (0+255),b
   791  00139C  0E00               	movlw	0
   792  00139E  6F80               	movwf	main@i& (0+255),b
   793  0013A0                     l2679:
   794                           
   795                           ; BSR set to: 0
   796  0013A0  BF81               	btfsc	(main@i+1)& (0+255),7,b
   797  0013A2  D006               	goto	l352
   798  0013A4  5181               	movf	(main@i+1)& (0+255),w,b
   799  0013A6  E110               	bnz	l2687
   800  0013A8  0E05               	movlw	5
   801  0013AA  5D80               	subwf	main@i& (0+255),w,b
   802  0013AC  B0D8               	btfsc	status,0,c
   803  0013AE  D00C               	goto	u1840
   804  0013B0                     l352:
   805                           
   806                           ; BSR set to: 0
   807                           ;the3.c: 538: _delay((unsigned long)((15)*(40000000/4000.0)));
   808                           
   809                           ; BSR set to: 0
   810  0013B0  0EC3               	movlw	195
   811  0013B2  6E26               	movwf	??_main& (0+255),c
   812  0013B4  0ECD               	movlw	205
   813  0013B6                     u2027:
   814  0013B6  2EE8               	decfsz	wreg,f,c
   815  0013B8  D7FE               	bra	u2027
   816  0013BA  2E26               	decfsz	??_main& (0+255),f,c
   817  0013BC  D7FC               	bra	u2027
   818  0013BE  F000               	nop	
   819  0013C0  0100               	movlb	0	; () banked
   820  0013C2  4B80               	infsnz	main@i& (0+255),f,b
   821  0013C4  2B81               	incf	(main@i+1)& (0+255),f,b
   822  0013C6  D7EC               	goto	l2679
   823  0013C8                     u1840:
   824  0013C8                     l2687:
   825                           
   826                           ; BSR set to: 0
   827                           ;the3.c: 540: InitLCD();
   828  0013C8  EC80  F00C         	call	_InitLCD	;wreg free
   829                           
   830                           ;the3.c: 542: ClearLCDScreen();
   831  0013CC  ECE4  F00F         	call	_ClearLCDScreen	;wreg free
   832                           
   833                           ;the3.c: 543: init();
   834  0013D0  ECAF  F00A         	call	_init	;wreg free
   835                           
   836                           ;the3.c: 544: first_message();
   837  0013D4  ECB2  F00F         	call	_first_message	;wreg free
   838                           
   839                           ;the3.c: 545: RE1button();
   840  0013D8  EC65  F00E         	call	_RE1button	;wreg free
   841                           
   842                           ;the3.c: 547: first_message();
   843  0013DC  ECB2  F00F         	call	_first_message	;wreg free
   844                           
   845                           ;the3.c: 548: delay_3_sec();
   846  0013E0  EC94  F00E         	call	_delay_3_sec	;wreg free
   847                           
   848                           ;the3.c: 550: ADON = 1;
   849  0013E4  80C2               	bsf	4034,0,c	;volatile
   850                           
   851                           ;the3.c: 551: INTCONbits.GIE_GIEH = 1;
   852  0013E6  8EF2               	bsf	intcon,7,c	;volatile
   853                           
   854                           ;the3.c: 552: INTCONbits.PEIE_GIEL = 1;
   855  0013E8  8CF2               	bsf	intcon,6,c	;volatile
   856                           
   857                           ;the3.c: 554: TMR0ON = 1;
   858  0013EA  8ED5               	bsf	4053,7,c	;volatile
   859                           
   860                           ;the3.c: 555: TMR1ON = 1;
   861  0013EC  80CD               	bsf	4045,0,c	;volatile
   862  0013EE                     
   863                           ;the3.c: 558: {
   864                           ;the3.c: 559: if(flag120sec == 0)
   865  0013EE  502F               	movf	_flag120sec,w,c
   866  0013F0  1030               	iorwf	_flag120sec+1,w,c
   867  0013F2  A4D8               	btfss	status,2,c
   868  0013F4  D032               	goto	l355
   869                           
   870                           ;the3.c: 560: {
   871                           ;the3.c: 561: if(pin_full == 0 )
   872  0013F6  BA41               	btfsc	_pin_full/(0+8),_pin_full& (0+7),c
   873  0013F8  D006               	goto	l356
   874                           
   875                           ;the3.c: 562: {
   876                           ;the3.c: 563: if(b6_pressed == 1)
   877  0013FA  B841               	btfsc	_b6_pressed/(0+8),_b6_pressed& (0+7),c
   878                           
   879                           ;the3.c: 564: {
   880                           ;the3.c: 565: next_char();
   881  0013FC  EC46  F00F         	call	_next_char	;wreg free
   882                           
   883                           ;the3.c: 566: }
   884                           ;the3.c: 567: set_a_pin_message();
   885  001400  ECAC  F00D         	call	_set_a_pin_message	;wreg free
   886                           
   887                           ;the3.c: 569: }
   888  001404  D7F4               	goto	l354
   889  001406                     l356:
   890                           
   891                           ;the3.c: 570: else if(pin_full == 1)
   892  001406  AA41               	btfss	_pin_full/(0+8),_pin_full& (0+7),c
   893  001408  D7F2               	goto	l354
   894                           
   895                           ;the3.c: 571: {
   896                           ;the3.c: 572: display_7_segment(10,10,10,10);
   897  00140A  0E00               	movlw	0
   898  00140C  6E1A               	movwf	display_7_segment@d0+1,c
   899  00140E  0E0A               	movlw	10
   900  001410  6E19               	movwf	display_7_segment@d0,c
   901  001412  0E00               	movlw	0
   902  001414  6E1C               	movwf	display_7_segment@d1+1,c
   903  001416  0E0A               	movlw	10
   904  001418  6E1B               	movwf	display_7_segment@d1,c
   905  00141A  0E00               	movlw	0
   906  00141C  6E1E               	movwf	display_7_segment@d2+1,c
   907  00141E  0E0A               	movlw	10
   908  001420  6E1D               	movwf	display_7_segment@d2,c
   909  001422  0E00               	movlw	0
   910  001424  6E20               	movwf	display_7_segment@d3+1,c
   911  001426  0E0A               	movlw	10
   912  001428  6E1F               	movwf	display_7_segment@d3,c
   913  00142A  ECFB  F00C         	call	_display_7_segment	;wreg free
   914                           
   915                           ;the3.c: 573: if(line_toggle == 0)
   916  00142E  A441               	btfss	_line_toggle/(0+8),_line_toggle& (0+7),c
   917                           
   918                           ;the3.c: 574: show_password();
   919  001430  ECF3  F00D         	call	_show_password	;wreg free
   920                           
   921                           ;the3.c: 575: display_7_segment(10,10,10,10);
   922  001434  0E00               	movlw	0
   923  001436  6E1A               	movwf	display_7_segment@d0+1,c
   924  001438  0E0A               	movlw	10
   925  00143A  6E19               	movwf	display_7_segment@d0,c
   926  00143C  0E00               	movlw	0
   927  00143E  6E1C               	movwf	display_7_segment@d1+1,c
   928  001440  0E0A               	movlw	10
   929  001442  6E1B               	movwf	display_7_segment@d1,c
   930  001444  0E00               	movlw	0
   931  001446  6E1E               	movwf	display_7_segment@d2+1,c
   932  001448  0E0A               	movlw	10
   933  00144A  6E1D               	movwf	display_7_segment@d2,c
   934  00144C  0E00               	movlw	0
   935  00144E  6E20               	movwf	display_7_segment@d3+1,c
   936  001450  0E0A               	movlw	10
   937  001452  6E1F               	movwf	display_7_segment@d3,c
   938  001454  ECFB  F00C         	call	_display_7_segment	;wreg free
   939                           
   940                           ;the3.c: 576: }
   941                           ;the3.c: 577: }
   942  001458  D7CA               	goto	l354
   943  00145A                     l355:
   944                           
   945                           ;the3.c: 578: else
   946                           ;the3.c: 579: {
   947                           ;the3.c: 580: display120sec_Int();
   948  00145A  EC5C  F00D         	call	_display120sec_Int	;wreg free
   949                           
   950                           ;the3.c: 581: if(pin_full==0 && flag20sec==0 )
   951  00145E  BA41               	btfsc	_pin_full/(0+8),_pin_full& (0+7),c
   952  001460  D00C               	goto	l362
   953  001462  502D               	movf	_flag20sec,w,c
   954  001464  102E               	iorwf	_flag20sec+1,w,c
   955  001466  A4D8               	btfss	status,2,c
   956  001468  D008               	goto	l362
   957                           
   958                           ;the3.c: 582: {
   959                           ;the3.c: 583: if(b6_pressed == 1)
   960  00146A  B841               	btfsc	_b6_pressed/(0+8),_b6_pressed& (0+7),c
   961                           
   962                           ;the3.c: 584: {
   963                           ;the3.c: 585: next_char2();
   964  00146C  EC2E  F00F         	call	_next_char2	;wreg free
   965                           
   966                           ;the3.c: 586: }
   967                           ;the3.c: 588: if(toggle == 1)
   968  001470  A241               	btfss	_toggle/(0+8),_toggle& (0+7),c
   969  001472  D7BD               	goto	l354
   970                           
   971                           ;the3.c: 589: enter_pin();
   972  001474  EC61  F00B         	call	_enter_pin	;wreg free
   973                           
   974                           ;the3.c: 590: }
   975  001478  D7BA               	goto	l354
   976  00147A                     l362:
   977                           
   978                           ;the3.c: 591: else if(pin_full==1)
   979  00147A  AA41               	btfss	_pin_full/(0+8),_pin_full& (0+7),c
   980  00147C  D7B8               	goto	l354
   981                           
   982                           ;the3.c: 592: {
   983                           ;the3.c: 593: if(check_correct_pass()==1){
   984  00147E  EC35  F00E         	call	_check_correct_pass	;wreg free
   985  001482  0419               	decf	?_check_correct_pass,w,c
   986  001484  101A               	iorwf	?_check_correct_pass+1,w,c
   987  001486  A4D8               	btfss	status,2,c
   988  001488  D007               	goto	l367
   989                           
   990                           ;the3.c: 594: endLCD();
   991  00148A  ECC5  F00F         	call	_endLCD	;wreg free
   992                           
   993                           ;the3.c: 595: INTCONbits.GIE_GIEH = 0;
   994  00148E  9EF2               	bcf	intcon,7,c	;volatile
   995                           
   996                           ;the3.c: 596: INTCONbits.PEIE_GIEL = 0;
   997  001490  9CF2               	bcf	intcon,6,c	;volatile
   998  001492                     
   999                           ;the3.c: 598: {
  1000                           ;the3.c: 599: display120sec_Int();
  1001  001492  EC5C  F00D         	call	_display120sec_Int	;wreg free
  1002  001496  D7FD               	goto	l368
  1003  001498                     l367:
  1004                           
  1005                           ;the3.c: 602: else if(attempt_num !=0 )
  1006  001498  502B               	movf	_attempt_num,w,c
  1007  00149A  102C               	iorwf	_attempt_num+1,w,c
  1008  00149C  B4D8               	btfsc	status,2,c
  1009  00149E  D028               	goto	l372
  1010                           
  1011                           ;the3.c: 603: {
  1012                           ;the3.c: 604: pin_full=0;
  1013  0014A0  9A41               	bcf	_pin_full/(0+8),_pin_full& (0+7),c
  1014                           
  1015                           ;the3.c: 605: for(unsigned int i=0 ; i<4 ;i++)
  1016  0014A2  0E00               	movlw	0
  1017  0014A4  0100               	movlb	0	; () banked
  1018  0014A6  6F83               	movwf	(main@i_627+1)& (0+255),b
  1019  0014A8  0E00               	movlw	0
  1020  0014AA  6F82               	movwf	main@i_627& (0+255),b
  1021  0014AC                     l2757:
  1022                           
  1023                           ; BSR set to: 0
  1024  0014AC  5183               	movf	(main@i_627+1)& (0+255),w,b
  1025  0014AE  E11C               	bnz	l2767
  1026  0014B0  0E04               	movlw	4
  1027  0014B2  5D82               	subwf	main@i_627& (0+255),w,b
  1028  0014B4  B0D8               	btfsc	status,0,c
  1029  0014B6  D018               	goto	u1980
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;the3.c: 606: {
  1033                           ;the3.c: 607: blank_val[i]='#';
  1034                           
  1035                           ; BSR set to: 0
  1036                           
  1037                           ; BSR set to: 0
  1038  0014B8  0E27               	movlw	low _blank_val
  1039  0014BA  2582               	addwf	main@i_627& (0+255),w,b
  1040  0014BC  6ED9               	movwf	fsr2l,c
  1041  0014BE  0E00               	movlw	high _blank_val
  1042  0014C0  2183               	addwfc	(main@i_627+1)& (0+255),w,b
  1043  0014C2  6EDA               	movwf	fsr2h,c
  1044  0014C4  0E23               	movlw	35
  1045  0014C6  6EDF               	movwf	indf2,c
  1046                           
  1047                           ;the3.c: 608: entered_pass[i]=-1;
  1048  0014C8  90D8               	bcf	status,0,c
  1049  0014CA  3582               	rlcf	main@i_627& (0+255),w,b
  1050  0014CC  6ED9               	movwf	fsr2l,c
  1051  0014CE  3583               	rlcf	(main@i_627+1)& (0+255),w,b
  1052  0014D0  6EDA               	movwf	fsr2h,c
  1053  0014D2  0E86               	movlw	low _entered_pass
  1054  0014D4  26D9               	addwf	fsr2l,f,c
  1055  0014D6  0E00               	movlw	high _entered_pass
  1056  0014D8  22DA               	addwfc	fsr2h,f,c
  1057  0014DA  0EFF               	movlw	255
  1058  0014DC  6EDE               	movwf	postinc2,c
  1059  0014DE  0EFF               	movlw	255
  1060  0014E0  6EDD               	movwf	postdec2,c
  1061                           
  1062                           ; BSR set to: 0
  1063  0014E2  4B82               	infsnz	main@i_627& (0+255),f,b
  1064  0014E4  2B83               	incf	(main@i_627+1)& (0+255),f,b
  1065  0014E6  D7E2               	goto	l2757
  1066  0014E8                     u1980:
  1067  0014E8                     l2767:
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;the3.c: 609: }
  1071                           ;the3.c: 610: attempt_num--;
  1072  0014E8  062B               	decf	_attempt_num,f,c
  1073  0014EA  A0D8               	btfss	status,0,c
  1074  0014EC  062C               	decf	_attempt_num+1,f,c
  1075                           
  1076                           ;the3.c: 611: }
  1077  0014EE  D032               	goto	l376
  1078  0014F0                     l372:
  1079                           
  1080                           ;the3.c: 612: else if(attempt_num ==0 )
  1081                           
  1082                           ; BSR set to: 0
  1083  0014F0  502B               	movf	_attempt_num,w,c
  1084  0014F2  102C               	iorwf	_attempt_num+1,w,c
  1085  0014F4  A4D8               	btfss	status,2,c
  1086  0014F6  D02E               	goto	l376
  1087                           
  1088                           ;the3.c: 613: {
  1089                           ;the3.c: 614: for(unsigned int i=0 ; i<4 ;i++)
  1090  0014F8  0E00               	movlw	0
  1091  0014FA  0100               	movlb	0	; () banked
  1092  0014FC  6F85               	movwf	(main@i_628+1)& (0+255),b
  1093  0014FE  0E00               	movlw	0
  1094  001500  6F84               	movwf	main@i_628& (0+255),b
  1095  001502                     l2773:
  1096                           
  1097                           ; BSR set to: 0
  1098  001502  5185               	movf	(main@i_628+1)& (0+255),w,b
  1099  001504  E11C               	bnz	l2783
  1100  001506  0E04               	movlw	4
  1101  001508  5D84               	subwf	main@i_628& (0+255),w,b
  1102  00150A  B0D8               	btfsc	status,0,c
  1103  00150C  D018               	goto	u2010
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;the3.c: 615: {
  1107                           ;the3.c: 616: blank_val[i]='#';
  1108                           
  1109                           ; BSR set to: 0
  1110                           
  1111                           ; BSR set to: 0
  1112  00150E  0E27               	movlw	low _blank_val
  1113  001510  2584               	addwf	main@i_628& (0+255),w,b
  1114  001512  6ED9               	movwf	fsr2l,c
  1115  001514  0E00               	movlw	high _blank_val
  1116  001516  2185               	addwfc	(main@i_628+1)& (0+255),w,b
  1117  001518  6EDA               	movwf	fsr2h,c
  1118  00151A  0E23               	movlw	35
  1119  00151C  6EDF               	movwf	indf2,c
  1120                           
  1121                           ;the3.c: 617: entered_pass[i]=-1;
  1122  00151E  90D8               	bcf	status,0,c
  1123  001520  3584               	rlcf	main@i_628& (0+255),w,b
  1124  001522  6ED9               	movwf	fsr2l,c
  1125  001524  3585               	rlcf	(main@i_628+1)& (0+255),w,b
  1126  001526  6EDA               	movwf	fsr2h,c
  1127  001528  0E86               	movlw	low _entered_pass
  1128  00152A  26D9               	addwf	fsr2l,f,c
  1129  00152C  0E00               	movlw	high _entered_pass
  1130  00152E  22DA               	addwfc	fsr2h,f,c
  1131  001530  0EFF               	movlw	255
  1132  001532  6EDE               	movwf	postinc2,c
  1133  001534  0EFF               	movlw	255
  1134  001536  6EDD               	movwf	postdec2,c
  1135                           
  1136                           ; BSR set to: 0
  1137  001538  4B84               	infsnz	main@i_628& (0+255),f,b
  1138  00153A  2B85               	incf	(main@i_628+1)& (0+255),f,b
  1139  00153C  D7E2               	goto	l2773
  1140  00153E                     u2010:
  1141  00153E                     l2783:
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;the3.c: 618: }
  1145                           ;the3.c: 619: write_wait_20sec();
  1146  00153E  EC9F  F00F         	call	_write_wait_20sec	;wreg free
  1147                           
  1148                           ;the3.c: 620: flag20sec=1;
  1149  001542  0E00               	movlw	0
  1150  001544  6E2E               	movwf	_flag20sec+1,c
  1151  001546  0E01               	movlw	1
  1152  001548  6E2D               	movwf	_flag20sec,c
  1153                           
  1154                           ;the3.c: 621: pin_full=0;
  1155  00154A  9A41               	bcf	_pin_full/(0+8),_pin_full& (0+7),c
  1156                           
  1157                           ;the3.c: 622: attempt_num=2;
  1158  00154C  0E00               	movlw	0
  1159  00154E  6E2C               	movwf	_attempt_num+1,c
  1160  001550  0E02               	movlw	2
  1161  001552  6E2B               	movwf	_attempt_num,c
  1162  001554                     l376:
  1163                           
  1164                           ;the3.c: 623: }
  1165                           ;the3.c: 624: counter_to_read_val=0;
  1166  001554  0E00               	movlw	0
  1167  001556  6E40               	movwf	_counter_to_read_val+1,c
  1168  001558  0E00               	movlw	0
  1169  00155A  6E3F               	movwf	_counter_to_read_val,c
  1170  00155C  D748               	goto	l354
  1171  00155E                     __end_of_main:
  1172                           	opt stack 0
  1173                           tblptru	equ	0xFF8
  1174                           tblptrh	equ	0xFF7
  1175                           tblptrl	equ	0xFF6
  1176                           tablat	equ	0xFF5
  1177                           intcon	equ	0xFF2
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           postdec1	equ	0xFE5
  1181                           fsr1l	equ	0xFE1
  1182                           indf2	equ	0xFDF
  1183                           postinc2	equ	0xFDE
  1184                           postdec2	equ	0xFDD
  1185                           fsr2h	equ	0xFDA
  1186                           fsr2l	equ	0xFD9
  1187                           status	equ	0xFD8
  1188                           
  1189 ;; *************** function _write_wait_20sec *****************
  1190 ;; Defined at:
  1191 ;;		line 518 in file "the3.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;		None
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;		None
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;Total ram usage:        0 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    5
  1212 ;; This function calls:
  1213 ;;		_WriteCommandToLCD
  1214 ;;		_WriteStringToLCD
  1215 ;; This function is called by:
  1216 ;;		_main
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text1
  1221  001F3E                     __ptext1:
  1222                           	opt stack 0
  1223  001F3E                     _write_wait_20sec:
  1224                           	opt stack 25
  1225                           
  1226                           ;the3.c: 520: WriteCommandToLCD(0x80);
  1227                           
  1228                           ;incstack = 0
  1229  001F3E  0E80               	movlw	128
  1230  001F40  EC74  F00F         	call	_WriteCommandToLCD
  1231                           
  1232                           ;the3.c: 521: WriteStringToLCD(" Enter pin:XXXX ");
  1233  001F44  0E34               	movlw	low STR_13
  1234  001F46  6E1A               	movwf	WriteStringToLCD@s,c
  1235  001F48  0E10               	movlw	high STR_13
  1236  001F4A  6E1B               	movwf	WriteStringToLCD@s+1,c
  1237  001F4C  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  1238                           
  1239                           ;the3.c: 522: WriteCommandToLCD(0xC0);
  1240  001F50  0EC0               	movlw	192
  1241  001F52  EC74  F00F         	call	_WriteCommandToLCD
  1242                           
  1243                           ;the3.c: 523: WriteStringToLCD("Try after 20sec.");
  1244  001F56  0E78               	movlw	low STR_14
  1245  001F58  6E1A               	movwf	WriteStringToLCD@s,c
  1246  001F5A  0E10               	movlw	high STR_14
  1247  001F5C  6E1B               	movwf	WriteStringToLCD@s+1,c
  1248  001F5E  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  1249  001F62  0012               	return		;funcret
  1250  001F64                     __end_of_write_wait_20sec:
  1251                           	opt stack 0
  1252                           tblptru	equ	0xFF8
  1253                           tblptrh	equ	0xFF7
  1254                           tblptrl	equ	0xFF6
  1255                           tablat	equ	0xFF5
  1256                           intcon	equ	0xFF2
  1257                           postinc0	equ	0xFEE
  1258                           wreg	equ	0xFE8
  1259                           postdec1	equ	0xFE5
  1260                           fsr1l	equ	0xFE1
  1261                           indf2	equ	0xFDF
  1262                           postinc2	equ	0xFDE
  1263                           postdec2	equ	0xFDD
  1264                           fsr2h	equ	0xFDA
  1265                           fsr2l	equ	0xFD9
  1266                           status	equ	0xFD8
  1267                           
  1268 ;; *************** function _show_password *****************
  1269 ;; Defined at:
  1270 ;;		line 263 in file "the3.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;		None
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;Total ram usage:        0 bytes
  1289 ;; Hardware stack levels used:    1
  1290 ;; Hardware stack levels required when called:    5
  1291 ;; This function calls:
  1292 ;;		_ClearLCDScreen
  1293 ;;		_WriteCommandToLCD
  1294 ;;		_WriteDataToLCD
  1295 ;;		_WriteStringToLCD
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text2
  1302  001BE6                     __ptext2:
  1303                           	opt stack 0
  1304  001BE6                     _show_password:
  1305                           	opt stack 25
  1306                           
  1307                           ;the3.c: 265: if(isBlank == 1)
  1308                           
  1309                           ;incstack = 0
  1310  001BE6  A641               	btfss	_isBlank/(0+8),_isBlank& (0+7),c
  1311  001BE8  D003               	goto	l276
  1312                           
  1313                           ;the3.c: 266: {
  1314                           ;the3.c: 267: ClearLCDScreen();
  1315  001BEA  ECE4  F00F         	call	_ClearLCDScreen	;wreg free
  1316                           
  1317                           ;the3.c: 268: }
  1318  001BEE  D03B               	goto	l277
  1319  001BF0                     l276:
  1320                           
  1321                           ;the3.c: 269: else
  1322                           ;the3.c: 270: {
  1323                           ;the3.c: 271: WriteCommandToLCD(0x80);
  1324  001BF0  0E80               	movlw	128
  1325  001BF2  EC74  F00F         	call	_WriteCommandToLCD
  1326                           
  1327                           ;the3.c: 272: WriteStringToLCD(" The new pin is ");
  1328  001BF6  0E45               	movlw	low STR_5
  1329  001BF8  6E1A               	movwf	WriteStringToLCD@s,c
  1330  001BFA  0E10               	movlw	high STR_5
  1331  001BFC  6E1B               	movwf	WriteStringToLCD@s+1,c
  1332  001BFE  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  1333                           
  1334                           ;the3.c: 274: WriteCommandToLCD(0xC0);
  1335  001C02  0EC0               	movlw	192
  1336  001C04  EC74  F00F         	call	_WriteCommandToLCD
  1337                           
  1338                           ;the3.c: 275: WriteStringToLCD("   ---");
  1339  001C08  0EB4               	movlw	low STR_6
  1340  001C0A  6E1A               	movwf	WriteStringToLCD@s,c
  1341  001C0C  0E10               	movlw	high STR_6
  1342  001C0E  6E1B               	movwf	WriteStringToLCD@s+1,c
  1343  001C10  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  1344                           
  1345                           ;the3.c: 277: WriteCommandToLCD(0xC6);
  1346  001C14  0EC6               	movlw	198
  1347  001C16  EC74  F00F         	call	_WriteCommandToLCD
  1348                           
  1349                           ;the3.c: 278: WriteDataToLCD((char)(((int)'0') + password_int[0]));
  1350  001C1A  0100               	movlb	0	; () banked
  1351  001C1C  518E               	movf	_password_int& (0+255),w,b
  1352  001C1E  0F30               	addlw	48
  1353  001C20  EC5E  F00F         	call	_WriteDataToLCD
  1354                           
  1355                           ;the3.c: 280: WriteCommandToLCD(0xC7);
  1356  001C24  0EC7               	movlw	199
  1357  001C26  EC74  F00F         	call	_WriteCommandToLCD
  1358                           
  1359                           ;the3.c: 281: WriteDataToLCD((char)(((int)'0') + password_int[1]));
  1360  001C2A  0100               	movlb	0	; () banked
  1361  001C2C  5190               	movf	(_password_int+2)& (0+255),w,b
  1362  001C2E  0F30               	addlw	48
  1363  001C30  EC5E  F00F         	call	_WriteDataToLCD
  1364                           
  1365                           ;the3.c: 283: WriteCommandToLCD(0xC8);
  1366  001C34  0EC8               	movlw	200
  1367  001C36  EC74  F00F         	call	_WriteCommandToLCD
  1368                           
  1369                           ;the3.c: 284: WriteDataToLCD((char)(((int)'0') + password_int[2]));
  1370  001C3A  0100               	movlb	0	; () banked
  1371  001C3C  5192               	movf	(_password_int+4)& (0+255),w,b
  1372  001C3E  0F30               	addlw	48
  1373  001C40  EC5E  F00F         	call	_WriteDataToLCD
  1374                           
  1375                           ;the3.c: 286: WriteCommandToLCD(0xC9);
  1376  001C44  0EC9               	movlw	201
  1377  001C46  EC74  F00F         	call	_WriteCommandToLCD
  1378                           
  1379                           ;the3.c: 287: WriteDataToLCD((char)(((int)'0') + password_int[3]));
  1380  001C4A  0100               	movlb	0	; () banked
  1381  001C4C  5194               	movf	(_password_int+6)& (0+255),w,b
  1382  001C4E  0F30               	addlw	48
  1383  001C50  EC5E  F00F         	call	_WriteDataToLCD
  1384                           
  1385                           ;the3.c: 289: WriteCommandToLCD(0xCA);
  1386  001C54  0ECA               	movlw	202
  1387  001C56  EC74  F00F         	call	_WriteCommandToLCD
  1388                           
  1389                           ;the3.c: 290: WriteStringToLCD("---   ");
  1390  001C5A  0EAD               	movlw	low STR_7
  1391  001C5C  6E1A               	movwf	WriteStringToLCD@s,c
  1392  001C5E  0E10               	movlw	high STR_7
  1393  001C60  6E1B               	movwf	WriteStringToLCD@s+1,c
  1394  001C62  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  1395  001C66                     l277:
  1396                           
  1397                           ;the3.c: 291: }
  1398                           ;the3.c: 293: line_toggle = 1;
  1399  001C66  8441               	bsf	_line_toggle/(0+8),_line_toggle& (0+7),c
  1400  001C68  0012               	return		;funcret
  1401  001C6A                     __end_of_show_password:
  1402                           	opt stack 0
  1403                           tblptru	equ	0xFF8
  1404                           tblptrh	equ	0xFF7
  1405                           tblptrl	equ	0xFF6
  1406                           tablat	equ	0xFF5
  1407                           intcon	equ	0xFF2
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           postdec1	equ	0xFE5
  1411                           fsr1l	equ	0xFE1
  1412                           indf2	equ	0xFDF
  1413                           postinc2	equ	0xFDE
  1414                           postdec2	equ	0xFDD
  1415                           fsr2h	equ	0xFDA
  1416                           fsr2l	equ	0xFD9
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _set_a_pin_message *****************
  1420 ;; Defined at:
  1421 ;;		line 208 in file "the3.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1439 ;;Total ram usage:        0 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    5
  1442 ;; This function calls:
  1443 ;;		_WriteCommandToLCD
  1444 ;;		_WriteDataToLCD
  1445 ;;		_WriteStringToLCD
  1446 ;;		_num_to_char
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text3
  1453  001B58                     __ptext3:
  1454                           	opt stack 0
  1455  001B58                     _set_a_pin_message:
  1456                           	opt stack 25
  1457                           
  1458                           ;the3.c: 211: WriteCommandToLCD(0x80);
  1459                           
  1460                           ;incstack = 0
  1461  001B58  0E80               	movlw	128
  1462  001B5A  EC74  F00F         	call	_WriteCommandToLCD
  1463                           
  1464                           ;the3.c: 212: WriteStringToLCD(" Set a pin:");
  1465  001B5E  0E89               	movlw	low STR_3
  1466  001B60  6E1A               	movwf	WriteStringToLCD@s,c
  1467  001B62  0E10               	movlw	high STR_3
  1468  001B64  6E1B               	movwf	WriteStringToLCD@s+1,c
  1469  001B66  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  1470                           
  1471                           ;the3.c: 215: WriteCommandToLCD(0x8B);
  1472  001B6A  0E8B               	movlw	139
  1473  001B6C  EC74  F00F         	call	_WriteCommandToLCD
  1474                           
  1475                           ;the3.c: 216: WriteDataToLCD(num_to_char(password_int[0],blank_val[0]));
  1476  001B70  C08E  F019         	movff	_password_int,num_to_char@x
  1477  001B74  C08F  F01A         	movff	_password_int+1,num_to_char@x+1
  1478  001B78  C027  F01B         	movff	_blank_val,num_to_char@y
  1479  001B7C  ECFB  F00F         	call	_num_to_char	;wreg free
  1480  001B80  EC5E  F00F         	call	_WriteDataToLCD
  1481                           
  1482                           ;the3.c: 218: WriteCommandToLCD(0x8C);
  1483  001B84  0E8C               	movlw	140
  1484  001B86  EC74  F00F         	call	_WriteCommandToLCD
  1485                           
  1486                           ;the3.c: 219: WriteDataToLCD(num_to_char(password_int[1],blank_val[1]));
  1487  001B8A  C090  F019         	movff	_password_int+2,num_to_char@x
  1488  001B8E  C091  F01A         	movff	_password_int+3,num_to_char@x+1
  1489  001B92  C028  F01B         	movff	_blank_val+1,num_to_char@y
  1490  001B96  ECFB  F00F         	call	_num_to_char	;wreg free
  1491  001B9A  EC5E  F00F         	call	_WriteDataToLCD
  1492                           
  1493                           ;the3.c: 221: WriteCommandToLCD(0x8D);
  1494  001B9E  0E8D               	movlw	141
  1495  001BA0  EC74  F00F         	call	_WriteCommandToLCD
  1496                           
  1497                           ;the3.c: 222: WriteDataToLCD(num_to_char(password_int[2],blank_val[2]));
  1498  001BA4  C092  F019         	movff	_password_int+4,num_to_char@x
  1499  001BA8  C093  F01A         	movff	_password_int+5,num_to_char@x+1
  1500  001BAC  C029  F01B         	movff	_blank_val+2,num_to_char@y
  1501  001BB0  ECFB  F00F         	call	_num_to_char	;wreg free
  1502  001BB4  EC5E  F00F         	call	_WriteDataToLCD
  1503                           
  1504                           ;the3.c: 224: WriteCommandToLCD(0x8E);
  1505  001BB8  0E8E               	movlw	142
  1506  001BBA  EC74  F00F         	call	_WriteCommandToLCD
  1507                           
  1508                           ;the3.c: 225: WriteDataToLCD(num_to_char(password_int[3],blank_val[3]));
  1509  001BBE  C094  F019         	movff	_password_int+6,num_to_char@x
  1510  001BC2  C095  F01A         	movff	_password_int+7,num_to_char@x+1
  1511  001BC6  C02A  F01B         	movff	_blank_val+3,num_to_char@y
  1512  001BCA  ECFB  F00F         	call	_num_to_char	;wreg free
  1513  001BCE  EC5E  F00F         	call	_WriteDataToLCD
  1514                           
  1515                           ;the3.c: 228: WriteCommandToLCD(0xC0);
  1516  001BD2  0EC0               	movlw	192
  1517  001BD4  EC74  F00F         	call	_WriteCommandToLCD
  1518                           
  1519                           ;the3.c: 229: WriteStringToLCD("                ");
  1520  001BD8  0E01               	movlw	low STR_4
  1521  001BDA  6E1A               	movwf	WriteStringToLCD@s,c
  1522  001BDC  0E10               	movlw	high STR_4
  1523  001BDE  6E1B               	movwf	WriteStringToLCD@s+1,c
  1524  001BE0  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  1525  001BE4  0012               	return		;funcret
  1526  001BE6                     __end_of_set_a_pin_message:
  1527                           	opt stack 0
  1528                           tblptru	equ	0xFF8
  1529                           tblptrh	equ	0xFF7
  1530                           tblptrl	equ	0xFF6
  1531                           tablat	equ	0xFF5
  1532                           intcon	equ	0xFF2
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1l	equ	0xFE1
  1537                           indf2	equ	0xFDF
  1538                           postinc2	equ	0xFDE
  1539                           postdec2	equ	0xFDD
  1540                           fsr2h	equ	0xFDA
  1541                           fsr2l	equ	0xFD9
  1542                           status	equ	0xFD8
  1543                           
  1544 ;; *************** function _next_char2 *****************
  1545 ;; Defined at:
  1546 ;;		line 255 in file "the3.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1564 ;;Total ram usage:        2 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    2
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text4
  1575  001E5C                     __ptext4:
  1576                           	opt stack 0
  1577  001E5C                     _next_char2:
  1578                           	opt stack 28
  1579                           
  1580                           ;the3.c: 258: if(counter_to_read_val<3 && entered_pass[counter_to_read_val] != -1)
  1581                           
  1582                           ;incstack = 0
  1583  001E5C  5040               	movf	_counter_to_read_val+1,w,c
  1584  001E5E  E114               	bnz	l2125
  1585  001E60  0E03               	movlw	3
  1586  001E62  5C3F               	subwf	_counter_to_read_val,w,c
  1587  001E64  B0D8               	btfsc	status,0,c
  1588  001E66  D010               	goto	l272
  1589  001E68  90D8               	bcf	status,0,c
  1590  001E6A  343F               	rlcf	_counter_to_read_val,w,c
  1591  001E6C  6ED9               	movwf	fsr2l,c
  1592  001E6E  3440               	rlcf	_counter_to_read_val+1,w,c
  1593  001E70  6EDA               	movwf	fsr2h,c
  1594  001E72  0E86               	movlw	low _entered_pass
  1595  001E74  26D9               	addwf	fsr2l,f,c
  1596  001E76  0E00               	movlw	high _entered_pass
  1597  001E78  22DA               	addwfc	fsr2h,f,c
  1598  001E7A  28DE               	incf	postinc2,w,c
  1599  001E7C  E103               	bnz	u1060
  1600  001E7E  28DE               	incf	postinc2,w,c
  1601  001E80  B4D8               	btfsc	status,2,c
  1602  001E82  D002               	goto	l272
  1603  001E84                     u1060:
  1604                           
  1605                           ;the3.c: 259: counter_to_read_val++;
  1606  001E84  4A3F               	infsnz	_counter_to_read_val,f,c
  1607  001E86  2A40               	incf	_counter_to_read_val+1,f,c
  1608  001E88                     l272:
  1609  001E88                     l2125:
  1610                           
  1611                           ;the3.c: 260: b6_pressed = 0;
  1612  001E88  9841               	bcf	_b6_pressed/(0+8),_b6_pressed& (0+7),c
  1613  001E8A  0012               	return		;funcret
  1614  001E8C                     __end_of_next_char2:
  1615                           	opt stack 0
  1616                           tblptru	equ	0xFF8
  1617                           tblptrh	equ	0xFF7
  1618                           tblptrl	equ	0xFF6
  1619                           tablat	equ	0xFF5
  1620                           intcon	equ	0xFF2
  1621                           postinc0	equ	0xFEE
  1622                           wreg	equ	0xFE8
  1623                           postdec1	equ	0xFE5
  1624                           fsr1l	equ	0xFE1
  1625                           indf2	equ	0xFDF
  1626                           postinc2	equ	0xFDE
  1627                           postdec2	equ	0xFDD
  1628                           fsr2h	equ	0xFDA
  1629                           fsr2l	equ	0xFD9
  1630                           status	equ	0xFD8
  1631                           
  1632 ;; *************** function _next_char *****************
  1633 ;; Defined at:
  1634 ;;		line 247 in file "the3.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;		None
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;Total ram usage:        2 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; Hardware stack levels required when called:    2
  1655 ;; This function calls:
  1656 ;;		Nothing
  1657 ;; This function is called by:
  1658 ;;		_main
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text5
  1663  001E8C                     __ptext5:
  1664                           	opt stack 0
  1665  001E8C                     _next_char:
  1666                           	opt stack 28
  1667                           
  1668                           ;the3.c: 250: if(counter_to_read_val<3 && password_int[counter_to_read_val] != -1)
  1669                           
  1670                           ;incstack = 0
  1671  001E8C  5040               	movf	_counter_to_read_val+1,w,c
  1672  001E8E  E114               	bnz	l2117
  1673  001E90  0E03               	movlw	3
  1674  001E92  5C3F               	subwf	_counter_to_read_val,w,c
  1675  001E94  B0D8               	btfsc	status,0,c
  1676  001E96  D010               	goto	l268
  1677  001E98  90D8               	bcf	status,0,c
  1678  001E9A  343F               	rlcf	_counter_to_read_val,w,c
  1679  001E9C  6ED9               	movwf	fsr2l,c
  1680  001E9E  3440               	rlcf	_counter_to_read_val+1,w,c
  1681  001EA0  6EDA               	movwf	fsr2h,c
  1682  001EA2  0E8E               	movlw	low _password_int
  1683  001EA4  26D9               	addwf	fsr2l,f,c
  1684  001EA6  0E00               	movlw	high _password_int
  1685  001EA8  22DA               	addwfc	fsr2h,f,c
  1686  001EAA  28DE               	incf	postinc2,w,c
  1687  001EAC  E103               	bnz	u1040
  1688  001EAE  28DE               	incf	postinc2,w,c
  1689  001EB0  B4D8               	btfsc	status,2,c
  1690  001EB2  D002               	goto	l268
  1691  001EB4                     u1040:
  1692                           
  1693                           ;the3.c: 251: counter_to_read_val++;
  1694  001EB4  4A3F               	infsnz	_counter_to_read_val,f,c
  1695  001EB6  2A40               	incf	_counter_to_read_val+1,f,c
  1696  001EB8                     l268:
  1697  001EB8                     l2117:
  1698                           
  1699                           ;the3.c: 252: b6_pressed = 0;
  1700  001EB8  9841               	bcf	_b6_pressed/(0+8),_b6_pressed& (0+7),c
  1701  001EBA  0012               	return		;funcret
  1702  001EBC                     __end_of_next_char:
  1703                           	opt stack 0
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           intcon	equ	0xFF2
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           postdec1	equ	0xFE5
  1712                           fsr1l	equ	0xFE1
  1713                           indf2	equ	0xFDF
  1714                           postinc2	equ	0xFDE
  1715                           postdec2	equ	0xFDD
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _init *****************
  1721 ;; Defined at:
  1722 ;;		line 64 in file "the3.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;		None
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  i               2   26[COMRAM] unsigned int 
  1727 ;;  i               2   24[COMRAM] unsigned int 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1741 ;;Total ram usage:        4 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    2
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_main
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text6
  1752  00155E                     __ptext6:
  1753                           	opt stack 0
  1754  00155E                     _init:
  1755                           	opt stack 28
  1756                           
  1757                           ;the3.c: 66: TRISH4 = 1;
  1758                           
  1759                           ;incstack = 0
  1760  00155E  8899               	bsf	3993,4,c	;volatile
  1761                           
  1762                           ;the3.c: 67: ADCON0 = 0b00110000;
  1763  001560  0E30               	movlw	48
  1764  001562  6EC2               	movwf	4034,c	;volatile
  1765                           
  1766                           ;the3.c: 68: ADCON1 = 0b00000000;
  1767  001564  0E00               	movlw	0
  1768  001566  6EC1               	movwf	4033,c	;volatile
  1769                           
  1770                           ;the3.c: 69: ADCON2 = 0b10001111;
  1771  001568  0E8F               	movlw	143
  1772  00156A  6EC0               	movwf	4032,c	;volatile
  1773                           
  1774                           ;the3.c: 70: ADIE = 1;
  1775  00156C  8C9D               	bsf	3997,6,c	;volatile
  1776                           
  1777                           ;the3.c: 71: ADIF = 0;
  1778  00156E  9C9E               	bcf	3998,6,c	;volatile
  1779                           
  1780                           ;the3.c: 73: INTCONbits.TMR0IE = 1;
  1781  001570  8AF2               	bsf	intcon,5,c	;volatile
  1782                           
  1783                           ;the3.c: 74: INTCONbits.TMR0IF = 0;
  1784  001572  94F2               	bcf	intcon,2,c	;volatile
  1785                           
  1786                           ;the3.c: 75: T0CON = 0b01000100;
  1787  001574  0E44               	movlw	68
  1788  001576  6ED5               	movwf	4053,c	;volatile
  1789                           
  1790                           ;the3.c: 76: TMR0 = 131;;
  1791  001578  0E00               	movlw	0
  1792  00157A  6ED7               	movwf	4055,c	;volatile
  1793  00157C  0E83               	movlw	131
  1794  00157E  6ED6               	movwf	4054,c	;volatile
  1795                           
  1796                           ;the3.c: 78: TMR1IE = 1;
  1797  001580  809D               	bsf	3997,0,c	;volatile
  1798                           
  1799                           ;the3.c: 79: T1CON = 0b10110000;
  1800  001582  0EB0               	movlw	176
  1801  001584  6ECD               	movwf	4045,c	;volatile
  1802                           
  1803                           ;the3.c: 80: TMR1=3036;;
  1804  001586  0E0B               	movlw	11
  1805  001588  6ECF               	movwf	4047,c	;volatile
  1806  00158A  0EDC               	movlw	220
  1807  00158C  6ECE               	movwf	4046,c	;volatile
  1808                           
  1809                           ;the3.c: 82: TRISB6 = 1;
  1810  00158E  8C93               	bsf	3987,6,c	;volatile
  1811                           
  1812                           ;the3.c: 83: TRISB7 = 1;
  1813  001590  8E93               	bsf	3987,7,c	;volatile
  1814                           
  1815                           ;the3.c: 84: TRISB5 = 0;
  1816  001592  9A93               	bcf	3987,5,c	;volatile
  1817                           
  1818                           ;the3.c: 85: TRISB4 = 0;
  1819  001594  9893               	bcf	3987,4,c	;volatile
  1820                           
  1821                           ;the3.c: 86: TRISB3 = 0;
  1822  001596  9693               	bcf	3987,3,c	;volatile
  1823                           
  1824                           ;the3.c: 87: TRISB2 = 0;
  1825  001598  9493               	bcf	3987,2,c	;volatile
  1826                           
  1827                           ;the3.c: 88: TRISB1 = 0;
  1828  00159A  9293               	bcf	3987,1,c	;volatile
  1829                           
  1830                           ;the3.c: 89: TRISB0 = 0;
  1831  00159C  9093               	bcf	3987,0,c	;volatile
  1832                           
  1833                           ;the3.c: 90: PORTB = 0;
  1834  00159E  0E00               	movlw	0
  1835  0015A0  6E81               	movwf	3969,c	;volatile
  1836                           
  1837                           ;the3.c: 91: LATB = 0;
  1838  0015A2  0E00               	movlw	0
  1839  0015A4  6E8A               	movwf	3978,c	;volatile
  1840                           
  1841                           ;the3.c: 92: INTCONbits.RBIE = 1;
  1842  0015A6  86F2               	bsf	intcon,3,c	;volatile
  1843                           
  1844                           ;the3.c: 93: INTCONbits.RBIF = 0;
  1845  0015A8  90F2               	bcf	intcon,0,c	;volatile
  1846                           
  1847                           ;the3.c: 94: INTCON2bits.RBPU = 0;
  1848  0015AA  9EF1               	bcf	intcon2,7,c	;volatile
  1849                           
  1850                           ;the3.c: 95: INTCON2bits.INTEDG0 = 0;
  1851  0015AC  9CF1               	bcf	intcon2,6,c	;volatile
  1852                           
  1853                           ;the3.c: 96: TRISE1 = 1;
  1854  0015AE  8296               	bsf	3990,1,c	;volatile
  1855                           
  1856                           ;the3.c: 97: TRISJ = 0;
  1857  0015B0  0E00               	movlw	0
  1858  0015B2  6E9A               	movwf	3994,c	;volatile
  1859                           
  1860                           ;the3.c: 98: LATJ = 0;
  1861  0015B4  0E00               	movlw	0
  1862  0015B6  6E91               	movwf	3985,c	;volatile
  1863                           
  1864                           ;the3.c: 99: LATH = 0;
  1865  0015B8  0E00               	movlw	0
  1866  0015BA  6E90               	movwf	3984,c	;volatile
  1867                           
  1868                           ;the3.c: 100: TRISH = TRISH & 0b11110000;
  1869  0015BC  5099               	movf	3993,w,c	;volatile
  1870  0015BE  0BF0               	andlw	240
  1871  0015C0  6E99               	movwf	3993,c	;volatile
  1872                           
  1873                           ;the3.c: 101: counter_to_read_val = 0;
  1874  0015C2  0E00               	movlw	0
  1875  0015C4  6E40               	movwf	_counter_to_read_val+1,c
  1876  0015C6  0E00               	movlw	0
  1877  0015C8  6E3F               	movwf	_counter_to_read_val,c
  1878                           
  1879                           ;the3.c: 102: for(unsigned int i =0;i<4;i++)
  1880  0015CA  0E00               	movlw	0
  1881  0015CC  6E1A               	movwf	init@i+1,c
  1882  0015CE  0E00               	movlw	0
  1883  0015D0  6E19               	movwf	init@i,c
  1884  0015D2                     l2023:
  1885  0015D2  501A               	movf	init@i+1,w,c
  1886  0015D4  E10F               	bnz	l2033
  1887  0015D6  0E04               	movlw	4
  1888  0015D8  5C19               	subwf	init@i,w,c
  1889  0015DA  B0D8               	btfsc	status,0,c
  1890  0015DC  D00B               	goto	u970
  1891                           
  1892                           ;the3.c: 103: {
  1893                           ;the3.c: 104: blank_val[i] = '#';
  1894  0015DE  0E27               	movlw	low _blank_val
  1895  0015E0  2419               	addwf	init@i,w,c
  1896  0015E2  6ED9               	movwf	fsr2l,c
  1897  0015E4  0E00               	movlw	high _blank_val
  1898  0015E6  201A               	addwfc	init@i+1,w,c
  1899  0015E8  6EDA               	movwf	fsr2h,c
  1900  0015EA  0E23               	movlw	35
  1901  0015EC  6EDF               	movwf	indf2,c
  1902  0015EE  4A19               	infsnz	init@i,f,c
  1903  0015F0  2A1A               	incf	init@i+1,f,c
  1904  0015F2  D7EF               	goto	l2023
  1905  0015F4                     u970:
  1906  0015F4                     l2033:
  1907                           
  1908                           ;the3.c: 105: }
  1909                           ;the3.c: 106: for(unsigned int i =0;i<4;i++)
  1910  0015F4  0E00               	movlw	0
  1911  0015F6  6E1C               	movwf	init@i_530+1,c
  1912  0015F8  0E00               	movlw	0
  1913  0015FA  6E1B               	movwf	init@i_530,c
  1914  0015FC  501C               	movf	init@i_530+1,w,c
  1915  0015FE  E123               	bnz	l233
  1916  001600  D01E               	goto	L1
  1917  001602                     
  1918                           ;the3.c: 107: {
  1919                           ;the3.c: 108: password_int[i] = -1;
  1920  001602  90D8               	bcf	status,0,c
  1921  001604  341B               	rlcf	init@i_530,w,c
  1922  001606  6ED9               	movwf	fsr2l,c
  1923  001608  341C               	rlcf	init@i_530+1,w,c
  1924  00160A  6EDA               	movwf	fsr2h,c
  1925  00160C  0E8E               	movlw	low _password_int
  1926  00160E  26D9               	addwf	fsr2l,f,c
  1927  001610  0E00               	movlw	high _password_int
  1928  001612  22DA               	addwfc	fsr2h,f,c
  1929  001614  0EFF               	movlw	255
  1930  001616  6EDE               	movwf	postinc2,c
  1931  001618  0EFF               	movlw	255
  1932  00161A  6EDD               	movwf	postdec2,c
  1933                           
  1934                           ;the3.c: 109: entered_pass[i]= -1;
  1935  00161C  90D8               	bcf	status,0,c
  1936  00161E  341B               	rlcf	init@i_530,w,c
  1937  001620  6ED9               	movwf	fsr2l,c
  1938  001622  341C               	rlcf	init@i_530+1,w,c
  1939  001624  6EDA               	movwf	fsr2h,c
  1940  001626  0E86               	movlw	low _entered_pass
  1941  001628  26D9               	addwf	fsr2l,f,c
  1942  00162A  0E00               	movlw	high _entered_pass
  1943  00162C  22DA               	addwfc	fsr2h,f,c
  1944  00162E  0EFF               	movlw	255
  1945  001630  6EDE               	movwf	postinc2,c
  1946  001632  0EFF               	movlw	255
  1947  001634  6EDD               	movwf	postdec2,c
  1948  001636  4A1B               	infsnz	init@i_530,f,c
  1949  001638  2A1C               	incf	init@i_530+1,f,c
  1950  00163A  501C               	movf	init@i_530+1,w,c
  1951  00163C  E104               	bnz	u990
  1952  00163E                     L1:
  1953  00163E  0E04               	movlw	4
  1954  001640  5C1B               	subwf	init@i_530,w,c
  1955  001642  A0D8               	btfss	status,0,c
  1956  001644  D7DE               	goto	l232
  1957  001646                     u990:
  1958  001646                     l233:
  1959                           
  1960                           ;the3.c: 110: }
  1961                           ;the3.c: 112: pin_full = 0;
  1962  001646  9A41               	bcf	_pin_full/(0+8),_pin_full& (0+7),c
  1963                           
  1964                           ;the3.c: 113: val_inPot = -1;
  1965  001648  6833               	setf	_val_inPot,c
  1966  00164A  6834               	setf	_val_inPot+1,c
  1967                           
  1968                           ;the3.c: 114: blink_timer = 625;;
  1969  00164C  0E02               	movlw	2
  1970  00164E  6E3E               	movwf	_blink_timer+1,c
  1971  001650  0E71               	movlw	113
  1972  001652  6E3D               	movwf	_blink_timer,c
  1973                           
  1974                           ;the3.c: 115: ADC_timer = 250;;
  1975  001654  0E00               	movlw	0
  1976  001656  6E3C               	movwf	_ADC_timer+1,c
  1977  001658  0EFA               	movlw	250
  1978  00165A  6E3B               	movwf	_ADC_timer,c
  1979                           
  1980                           ;the3.c: 116: sh_pass_timer = 1250;;
  1981  00165C  0E04               	movlw	4
  1982  00165E  0100               	movlb	0	; () banked
  1983  001660  6F9D               	movwf	(_sh_pass_timer+1)& (0+255),b
  1984  001662  0EE2               	movlw	226
  1985  001664  6F9C               	movwf	_sh_pass_timer& (0+255),b
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;the3.c: 117: cur_val_inPot = -1;
  1989  001666  6839               	setf	_cur_val_inPot,c
  1990  001668  683A               	setf	_cur_val_inPot+1,c
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;the3.c: 118: pre_val_inPot = -1;
  1994  00166A  6837               	setf	_pre_val_inPot,c
  1995  00166C  6838               	setf	_pre_val_inPot+1,c
  1996                           
  1997                           ;the3.c: 119: diff_val2 = 0;
  1998  00166E  0E00               	movlw	0
  1999  001670  6E36               	movwf	_diff_val2+1,c
  2000  001672  0E00               	movlw	0
  2001  001674  6E35               	movwf	_diff_val2,c
  2002                           
  2003                           ;the3.c: 120: diff_val = 0;
  2004  001676  0E00               	movlw	0
  2005  001678  6F9F               	movwf	(_diff_val+1)& (0+255),b
  2006  00167A  0E00               	movlw	0
  2007  00167C  6F9E               	movwf	_diff_val& (0+255),b
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;the3.c: 121: b6_pressed = 0;
  2011  00167E  9841               	bcf	_b6_pressed/(0+8),_b6_pressed& (0+7),c
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;the3.c: 122: isBlank = 0;
  2015  001680  9641               	bcf	_isBlank/(0+8),_isBlank& (0+7),c
  2016                           
  2017                           ;the3.c: 123: sh_pass_count = 0;
  2018  001682  0E00               	movlw	0
  2019  001684  6F9B               	movwf	(_sh_pass_count+1)& (0+255),b
  2020  001686  0E00               	movlw	0
  2021  001688  6F9A               	movwf	_sh_pass_count& (0+255),b
  2022                           
  2023                           ;the3.c: 124: timer_1sec=20;;
  2024  00168A  0E00               	movlw	0
  2025  00168C  6F97               	movwf	(_timer_1sec+1)& (0+255),b
  2026  00168E  0E14               	movlw	20
  2027  001690  6F96               	movwf	_timer_1sec& (0+255),b
  2028                           
  2029                           ;the3.c: 125: counter_120sec=120;
  2030  001692  0E00               	movlw	0
  2031  001694  6E32               	movwf	_counter_120sec+1,c
  2032  001696  0E78               	movlw	120
  2033  001698  6E31               	movwf	_counter_120sec,c
  2034                           
  2035                           ;the3.c: 126: counter_20sec=20;
  2036  00169A  0E00               	movlw	0
  2037  00169C  6F99               	movwf	(_counter_20sec+1)& (0+255),b
  2038  00169E  0E14               	movlw	20
  2039  0016A0  6F98               	movwf	_counter_20sec& (0+255),b
  2040                           
  2041                           ;the3.c: 127: flag20sec=0;
  2042  0016A2  0E00               	movlw	0
  2043  0016A4  6E2E               	movwf	_flag20sec+1,c
  2044  0016A6  0E00               	movlw	0
  2045  0016A8  6E2D               	movwf	_flag20sec,c
  2046                           
  2047                           ;the3.c: 128: flag120sec=0;
  2048  0016AA  0E00               	movlw	0
  2049  0016AC  6E30               	movwf	_flag120sec+1,c
  2050  0016AE  0E00               	movlw	0
  2051  0016B0  6E2F               	movwf	_flag120sec,c
  2052                           
  2053                           ;the3.c: 129: attempt_num=2;
  2054  0016B2  0E00               	movlw	0
  2055  0016B4  6E2C               	movwf	_attempt_num+1,c
  2056  0016B6  0E02               	movlw	2
  2057  0016B8  6E2B               	movwf	_attempt_num,c
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;the3.c: 130: toggle =0;
  2061  0016BA  9241               	bcf	_toggle/(0+8),_toggle& (0+7),c
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;the3.c: 131: line_toggle = 0;
  2065  0016BC  9441               	bcf	_line_toggle/(0+8),_line_toggle& (0+7),c
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;the3.c: 132: isEnterPin = 0;
  2069  0016BE  9041               	bcf	_isEnterPin/(0+8),_isEnterPin& (0+7),c
  2070                           
  2071                           ; BSR set to: 0
  2072  0016C0  0012               	return		;funcret
  2073  0016C2                     __end_of_init:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           intcon	equ	0xFF2
  2080                           intcon2	equ	0xFF1
  2081                           postinc0	equ	0xFEE
  2082                           wreg	equ	0xFE8
  2083                           postdec1	equ	0xFE5
  2084                           fsr1l	equ	0xFE1
  2085                           indf2	equ	0xFDF
  2086                           postinc2	equ	0xFDE
  2087                           postdec2	equ	0xFDD
  2088                           fsr2h	equ	0xFDA
  2089                           fsr2l	equ	0xFD9
  2090                           status	equ	0xFD8
  2091                           
  2092 ;; *************** function _first_message *****************
  2093 ;; Defined at:
  2094 ;;		line 136 in file "the3.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;Total ram usage:        0 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    5
  2115 ;; This function calls:
  2116 ;;		_WriteCommandToLCD
  2117 ;;		_WriteStringToLCD
  2118 ;; This function is called by:
  2119 ;;		_main
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text7
  2124  001F64                     __ptext7:
  2125                           	opt stack 0
  2126  001F64                     _first_message:
  2127                           	opt stack 25
  2128                           
  2129                           ;the3.c: 138: WriteCommandToLCD(0x80);
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;incstack = 0
  2133  001F64  0E80               	movlw	128
  2134  001F66  EC74  F00F         	call	_WriteCommandToLCD
  2135                           
  2136                           ;the3.c: 139: WriteStringToLCD(" $>Very  Safe<$ ");
  2137  001F6A  0E23               	movlw	low STR_1
  2138  001F6C  6E1A               	movwf	WriteStringToLCD@s,c
  2139  001F6E  0E10               	movlw	high STR_1
  2140  001F70  6E1B               	movwf	WriteStringToLCD@s+1,c
  2141  001F72  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  2142                           
  2143                           ;the3.c: 140: WriteCommandToLCD(0xC0);
  2144  001F76  0EC0               	movlw	192
  2145  001F78  EC74  F00F         	call	_WriteCommandToLCD
  2146                           
  2147                           ;the3.c: 141: WriteStringToLCD(" $$$$$$$$$$$$$$ ");
  2148  001F7C  0E12               	movlw	low STR_2
  2149  001F7E  6E1A               	movwf	WriteStringToLCD@s,c
  2150  001F80  0E10               	movlw	high STR_2
  2151  001F82  6E1B               	movwf	WriteStringToLCD@s+1,c
  2152  001F84  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  2153  001F88  0012               	return		;funcret
  2154  001F8A                     __end_of_first_message:
  2155                           	opt stack 0
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           intcon	equ	0xFF2
  2161                           intcon2	equ	0xFF1
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           postdec1	equ	0xFE5
  2165                           fsr1l	equ	0xFE1
  2166                           indf2	equ	0xFDF
  2167                           postinc2	equ	0xFDE
  2168                           postdec2	equ	0xFDD
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _enter_pin *****************
  2174 ;; Defined at:
  2175 ;;		line 454 in file "the3.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    5
  2196 ;; This function calls:
  2197 ;;		_WriteCommandToLCD
  2198 ;;		_WriteDataToLCD
  2199 ;;		_WriteStringToLCD
  2200 ;;		_display120sec_Int
  2201 ;;		_num_to_char
  2202 ;; This function is called by:
  2203 ;;		_main
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text8
  2208  0016C2                     __ptext8:
  2209                           	opt stack 0
  2210  0016C2                     _enter_pin:
  2211                           	opt stack 25
  2212                           
  2213                           ;the3.c: 456: if(isEnterPin == 0)
  2214                           
  2215                           ;incstack = 0
  2216  0016C2  B041               	btfsc	_isEnterPin/(0+8),_isEnterPin& (0+7),c
  2217  0016C4  D05A               	goto	l333
  2218                           
  2219                           ;the3.c: 457: {
  2220                           ;the3.c: 458: display120sec_Int();
  2221  0016C6  EC5C  F00D         	call	_display120sec_Int	;wreg free
  2222                           
  2223                           ;the3.c: 459: WriteCommandToLCD(0x80);
  2224  0016CA  0E80               	movlw	128
  2225  0016CC  EC74  F00F         	call	_WriteCommandToLCD
  2226                           
  2227                           ;the3.c: 460: WriteStringToLCD(" Enter pin:");
  2228  0016D0  0E95               	movlw	low STR_8
  2229  0016D2  6E1A               	movwf	WriteStringToLCD@s,c
  2230  0016D4  0E10               	movlw	high STR_8
  2231  0016D6  6E1B               	movwf	WriteStringToLCD@s+1,c
  2232  0016D8  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  2233                           
  2234                           ;the3.c: 462: WriteCommandToLCD(0x8B);
  2235  0016DC  0E8B               	movlw	139
  2236  0016DE  EC74  F00F         	call	_WriteCommandToLCD
  2237                           
  2238                           ;the3.c: 463: WriteDataToLCD(num_to_char(entered_pass[0],blank_val[0]));
  2239  0016E2  C086  F019         	movff	_entered_pass,num_to_char@x
  2240  0016E6  C087  F01A         	movff	_entered_pass+1,num_to_char@x+1
  2241  0016EA  C027  F01B         	movff	_blank_val,num_to_char@y
  2242  0016EE  ECFB  F00F         	call	_num_to_char	;wreg free
  2243  0016F2  EC5E  F00F         	call	_WriteDataToLCD
  2244                           
  2245                           ;the3.c: 465: WriteCommandToLCD(0x8C);
  2246  0016F6  0E8C               	movlw	140
  2247  0016F8  EC74  F00F         	call	_WriteCommandToLCD
  2248                           
  2249                           ;the3.c: 466: WriteDataToLCD(num_to_char(entered_pass[1],blank_val[1]));
  2250  0016FC  C088  F019         	movff	_entered_pass+2,num_to_char@x
  2251  001700  C089  F01A         	movff	_entered_pass+3,num_to_char@x+1
  2252  001704  C028  F01B         	movff	_blank_val+1,num_to_char@y
  2253  001708  ECFB  F00F         	call	_num_to_char	;wreg free
  2254  00170C  EC5E  F00F         	call	_WriteDataToLCD
  2255                           
  2256                           ;the3.c: 468: WriteCommandToLCD(0x8D);
  2257  001710  0E8D               	movlw	141
  2258  001712  EC74  F00F         	call	_WriteCommandToLCD
  2259                           
  2260                           ;the3.c: 469: WriteDataToLCD(num_to_char(entered_pass[2],blank_val[2]));
  2261  001716  C08A  F019         	movff	_entered_pass+4,num_to_char@x
  2262  00171A  C08B  F01A         	movff	_entered_pass+5,num_to_char@x+1
  2263  00171E  C029  F01B         	movff	_blank_val+2,num_to_char@y
  2264  001722  ECFB  F00F         	call	_num_to_char	;wreg free
  2265  001726  EC5E  F00F         	call	_WriteDataToLCD
  2266                           
  2267                           ;the3.c: 471: WriteCommandToLCD(0x8E);
  2268  00172A  0E8E               	movlw	142
  2269  00172C  EC74  F00F         	call	_WriteCommandToLCD
  2270                           
  2271                           ;the3.c: 472: WriteDataToLCD(num_to_char(entered_pass[3],blank_val[3]));
  2272  001730  C08C  F019         	movff	_entered_pass+6,num_to_char@x
  2273  001734  C08D  F01A         	movff	_entered_pass+7,num_to_char@x+1
  2274  001738  C02A  F01B         	movff	_blank_val+3,num_to_char@y
  2275  00173C  ECFB  F00F         	call	_num_to_char	;wreg free
  2276  001740  EC5E  F00F         	call	_WriteDataToLCD
  2277                           
  2278                           ;the3.c: 474: WriteCommandToLCD(0xC0);
  2279  001744  0EC0               	movlw	192
  2280  001746  EC74  F00F         	call	_WriteCommandToLCD
  2281                           
  2282                           ;the3.c: 475: WriteStringToLCD("  Attempts:");
  2283  00174A  0EA1               	movlw	low STR_9
  2284  00174C  6E1A               	movwf	WriteStringToLCD@s,c
  2285  00174E  0E10               	movlw	high STR_9
  2286  001750  6E1B               	movwf	WriteStringToLCD@s+1,c
  2287  001752  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  2288                           
  2289                           ;the3.c: 477: WriteCommandToLCD(0xCB);
  2290  001756  0ECB               	movlw	203
  2291  001758  EC74  F00F         	call	_WriteCommandToLCD
  2292                           
  2293                           ;the3.c: 478: WriteDataToLCD((char)(((int)'0') + attempt_num));
  2294  00175C  502B               	movf	_attempt_num,w,c
  2295  00175E  0F30               	addlw	48
  2296  001760  EC5E  F00F         	call	_WriteDataToLCD
  2297                           
  2298                           ;the3.c: 480: WriteCommandToLCD(0xCC);
  2299  001764  0ECC               	movlw	204
  2300  001766  EC74  F00F         	call	_WriteCommandToLCD
  2301                           
  2302                           ;the3.c: 481: WriteStringToLCD("    ");
  2303  00176A  0E0D               	movlw	low (STR_4+12)
  2304  00176C  6E1A               	movwf	WriteStringToLCD@s,c
  2305  00176E  0E10               	movlw	high (STR_4+12)
  2306  001770  6E1B               	movwf	WriteStringToLCD@s+1,c
  2307  001772  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  2308                           
  2309                           ;the3.c: 482: isEnterPin = 1;
  2310  001776  8041               	bsf	_isEnterPin/(0+8),_isEnterPin& (0+7),c
  2311                           
  2312                           ;the3.c: 483: }
  2313  001778  D03B               	goto	l334
  2314  00177A                     l333:
  2315                           
  2316                           ;the3.c: 484: else
  2317                           ;the3.c: 485: {
  2318                           ;the3.c: 487: WriteCommandToLCD(0x8B);
  2319  00177A  0E8B               	movlw	139
  2320  00177C  EC74  F00F         	call	_WriteCommandToLCD
  2321                           
  2322                           ;the3.c: 488: WriteDataToLCD(num_to_char(entered_pass[0],blank_val[0]));
  2323  001780  C086  F019         	movff	_entered_pass,num_to_char@x
  2324  001784  C087  F01A         	movff	_entered_pass+1,num_to_char@x+1
  2325  001788  C027  F01B         	movff	_blank_val,num_to_char@y
  2326  00178C  ECFB  F00F         	call	_num_to_char	;wreg free
  2327  001790  EC5E  F00F         	call	_WriteDataToLCD
  2328                           
  2329                           ;the3.c: 490: WriteCommandToLCD(0x8C);
  2330  001794  0E8C               	movlw	140
  2331  001796  EC74  F00F         	call	_WriteCommandToLCD
  2332                           
  2333                           ;the3.c: 491: WriteDataToLCD(num_to_char(entered_pass[1],blank_val[1]));
  2334  00179A  C088  F019         	movff	_entered_pass+2,num_to_char@x
  2335  00179E  C089  F01A         	movff	_entered_pass+3,num_to_char@x+1
  2336  0017A2  C028  F01B         	movff	_blank_val+1,num_to_char@y
  2337  0017A6  ECFB  F00F         	call	_num_to_char	;wreg free
  2338  0017AA  EC5E  F00F         	call	_WriteDataToLCD
  2339                           
  2340                           ;the3.c: 493: WriteCommandToLCD(0x8D);
  2341  0017AE  0E8D               	movlw	141
  2342  0017B0  EC74  F00F         	call	_WriteCommandToLCD
  2343                           
  2344                           ;the3.c: 494: WriteDataToLCD(num_to_char(entered_pass[2],blank_val[2]));
  2345  0017B4  C08A  F019         	movff	_entered_pass+4,num_to_char@x
  2346  0017B8  C08B  F01A         	movff	_entered_pass+5,num_to_char@x+1
  2347  0017BC  C029  F01B         	movff	_blank_val+2,num_to_char@y
  2348  0017C0  ECFB  F00F         	call	_num_to_char	;wreg free
  2349  0017C4  EC5E  F00F         	call	_WriteDataToLCD
  2350                           
  2351                           ;the3.c: 496: WriteCommandToLCD(0x8E);
  2352  0017C8  0E8E               	movlw	142
  2353  0017CA  EC74  F00F         	call	_WriteCommandToLCD
  2354                           
  2355                           ;the3.c: 497: WriteDataToLCD(num_to_char(entered_pass[3],blank_val[3]));
  2356  0017CE  C08C  F019         	movff	_entered_pass+6,num_to_char@x
  2357  0017D2  C08D  F01A         	movff	_entered_pass+7,num_to_char@x+1
  2358  0017D6  C02A  F01B         	movff	_blank_val+3,num_to_char@y
  2359  0017DA  ECFB  F00F         	call	_num_to_char	;wreg free
  2360  0017DE  EC5E  F00F         	call	_WriteDataToLCD
  2361                           
  2362                           ;the3.c: 499: WriteCommandToLCD(0xCB);
  2363  0017E2  0ECB               	movlw	203
  2364  0017E4  EC74  F00F         	call	_WriteCommandToLCD
  2365                           
  2366                           ;the3.c: 500: WriteDataToLCD((char)(((int)'0') + attempt_num));
  2367  0017E8  502B               	movf	_attempt_num,w,c
  2368  0017EA  0F30               	addlw	48
  2369  0017EC  EC5E  F00F         	call	_WriteDataToLCD
  2370  0017F0                     l334:
  2371                           
  2372                           ;the3.c: 502: }
  2373                           ;the3.c: 504: toggle =0;
  2374  0017F0  9241               	bcf	_toggle/(0+8),_toggle& (0+7),c
  2375  0017F2  0012               	return		;funcret
  2376  0017F4                     __end_of_enter_pin:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           intcon	equ	0xFF2
  2383                           intcon2	equ	0xFF1
  2384                           postinc0	equ	0xFEE
  2385                           wreg	equ	0xFE8
  2386                           postdec1	equ	0xFE5
  2387                           fsr1l	equ	0xFE1
  2388                           indf2	equ	0xFDF
  2389                           postinc2	equ	0xFDE
  2390                           postdec2	equ	0xFDD
  2391                           fsr2h	equ	0xFDA
  2392                           fsr2l	equ	0xFD9
  2393                           status	equ	0xFD8
  2394                           
  2395 ;; *************** function _num_to_char *****************
  2396 ;; Defined at:
  2397 ;;		line 198 in file "the3.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  x               2   24[COMRAM] int 
  2400 ;;  y               1   26[COMRAM] unsigned char 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      unsigned char 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2412 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;Total ram usage:        3 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    2
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_set_a_pin_message
  2423 ;;		_enter_pin
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text9
  2428  001FF6                     __ptext9:
  2429                           	opt stack 0
  2430  001FF6                     _num_to_char:
  2431                           	opt stack 27
  2432                           
  2433                           ;the3.c: 200: if(x == -1)
  2434                           
  2435                           ;incstack = 0
  2436  001FF6  2819               	incf	num_to_char@x,w,c
  2437  001FF8  E105               	bnz	l1891
  2438  001FFA  281A               	incf	num_to_char@x+1,w,c
  2439  001FFC  A4D8               	btfss	status,2,c
  2440  001FFE  D002               	goto	l251
  2441                           
  2442                           ;the3.c: 201: {
  2443                           ;the3.c: 202: return y;
  2444  002000  501B               	movf	num_to_char@y,w,c
  2445                           
  2446                           ;the3.c: 203: }
  2447  002002  0012               	return	
  2448  002004                     l251:
  2449  002004                     l1891:
  2450                           
  2451                           ;the3.c: 204: else
  2452                           ;the3.c: 205: return (char)(((int)'0') + x);
  2453  002004  5019               	movf	num_to_char@x,w,c
  2454  002006  0F30               	addlw	48
  2455  002008  0012               	return	
  2456  00200A                     __end_of_num_to_char:
  2457                           	opt stack 0
  2458                           tblptru	equ	0xFF8
  2459                           tblptrh	equ	0xFF7
  2460                           tblptrl	equ	0xFF6
  2461                           tablat	equ	0xFF5
  2462                           intcon	equ	0xFF2
  2463                           intcon2	equ	0xFF1
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           postdec1	equ	0xFE5
  2467                           fsr1l	equ	0xFE1
  2468                           indf2	equ	0xFDF
  2469                           postinc2	equ	0xFDE
  2470                           postdec2	equ	0xFDD
  2471                           fsr2h	equ	0xFDA
  2472                           fsr2l	equ	0xFD9
  2473                           status	equ	0xFD8
  2474                           
  2475 ;; *************** function _display120sec_Int *****************
  2476 ;; Defined at:
  2477 ;;		line 298 in file "the3.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  a4              2   30[BANK0 ] unsigned int 
  2482 ;;  a3              2   28[BANK0 ] unsigned int 
  2483 ;;  a2              2   26[BANK0 ] unsigned int 
  2484 ;;  a1              2   24[BANK0 ] unsigned int 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;Total ram usage:        8 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    3
  2501 ;; This function calls:
  2502 ;;		___lwdiv
  2503 ;;		___lwmod
  2504 ;;		_display_7_segment
  2505 ;; This function is called by:
  2506 ;;		_enter_pin
  2507 ;;		_main
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text10
  2512  001AB8                     __ptext10:
  2513                           	opt stack 0
  2514  001AB8                     _display120sec_Int:
  2515                           	opt stack 26
  2516                           
  2517                           ;the3.c: 301: if(counter_120sec==0)
  2518                           
  2519                           ;incstack = 0
  2520  001AB8  5031               	movf	_counter_120sec,w,c
  2521  001ABA  1032               	iorwf	_counter_120sec+1,w,c
  2522  001ABC  B4D8               	btfsc	status,2,c
  2523  001ABE  00FF               	reset		;# 
  2524                           
  2525                           ;the3.c: 303: unsigned int a1,a2,a3,a4;
  2526                           ;the3.c: 304: a1=counter_120sec%10;
  2527  001AC0  C031  F020         	movff	_counter_120sec,___lwmod@dividend
  2528  001AC4  C032  F021         	movff	_counter_120sec+1,___lwmod@dividend+1
  2529  001AC8  0E00               	movlw	0
  2530  001ACA  6E23               	movwf	___lwmod@divisor+1,c
  2531  001ACC  0E0A               	movlw	10
  2532  001ACE  6E22               	movwf	___lwmod@divisor,c
  2533  001AD0  EC0D  F00F         	call	___lwmod	;wreg free
  2534  001AD4  C020  F078         	movff	?___lwmod,display120sec_Int@a1
  2535  001AD8  C021  F079         	movff	?___lwmod+1,display120sec_Int@a1+1
  2536                           
  2537                           ;the3.c: 305: a2=(counter_120sec/10)%10;
  2538  001ADC  0E00               	movlw	0
  2539  001ADE  6E1C               	movwf	___lwdiv@divisor+1,c
  2540  001AE0  0E0A               	movlw	10
  2541  001AE2  6E1B               	movwf	___lwdiv@divisor,c
  2542  001AE4  C031  F019         	movff	_counter_120sec,___lwdiv@dividend
  2543  001AE8  C032  F01A         	movff	_counter_120sec+1,___lwdiv@dividend+1
  2544  001AEC  ECBE  F00E         	call	___lwdiv	;wreg free
  2545  001AF0  C019  F020         	movff	?___lwdiv,___lwmod@dividend
  2546  001AF4  C01A  F021         	movff	?___lwdiv+1,___lwmod@dividend+1
  2547  001AF8  0E00               	movlw	0
  2548  001AFA  6E23               	movwf	___lwmod@divisor+1,c
  2549  001AFC  0E0A               	movlw	10
  2550  001AFE  6E22               	movwf	___lwmod@divisor,c
  2551  001B00  EC0D  F00F         	call	___lwmod	;wreg free
  2552  001B04  C020  F07A         	movff	?___lwmod,display120sec_Int@a2
  2553  001B08  C021  F07B         	movff	?___lwmod+1,display120sec_Int@a2+1
  2554                           
  2555                           ;the3.c: 306: a3=counter_120sec/100;
  2556  001B0C  C031  F019         	movff	_counter_120sec,___lwdiv@dividend
  2557  001B10  C032  F01A         	movff	_counter_120sec+1,___lwdiv@dividend+1
  2558  001B14  0E00               	movlw	0
  2559  001B16  6E1C               	movwf	___lwdiv@divisor+1,c
  2560  001B18  0E64               	movlw	100
  2561  001B1A  6E1B               	movwf	___lwdiv@divisor,c
  2562  001B1C  ECBE  F00E         	call	___lwdiv	;wreg free
  2563  001B20  C019  F07C         	movff	?___lwdiv,display120sec_Int@a3
  2564  001B24  C01A  F07D         	movff	?___lwdiv+1,display120sec_Int@a3+1
  2565                           
  2566                           ;the3.c: 307: a4=0;
  2567  001B28  0E00               	movlw	0
  2568  001B2A  0100               	movlb	0	; () banked
  2569  001B2C  6F7F               	movwf	(display120sec_Int@a4+1)& (0+255),b
  2570  001B2E  0E00               	movlw	0
  2571  001B30  6F7E               	movwf	display120sec_Int@a4& (0+255),b
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;the3.c: 308: display_7_segment(a4,a3,a2,a1);
  2575  001B32  C07E  F019         	movff	display120sec_Int@a4,display_7_segment@d0
  2576  001B36  C07F  F01A         	movff	display120sec_Int@a4+1,display_7_segment@d0+1
  2577  001B3A  C07C  F01B         	movff	display120sec_Int@a3,display_7_segment@d1
  2578  001B3E  C07D  F01C         	movff	display120sec_Int@a3+1,display_7_segment@d1+1
  2579  001B42  C07A  F01D         	movff	display120sec_Int@a2,display_7_segment@d2
  2580  001B46  C07B  F01E         	movff	display120sec_Int@a2+1,display_7_segment@d2+1
  2581  001B4A  C078  F01F         	movff	display120sec_Int@a1,display_7_segment@d3
  2582  001B4E  C079  F020         	movff	display120sec_Int@a1+1,display_7_segment@d3+1
  2583  001B52  ECFB  F00C         	call	_display_7_segment	;wreg free
  2584  001B56  0012               	return		;funcret
  2585  001B58                     __end_of_display120sec_Int:
  2586                           	opt stack 0
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           intcon	equ	0xFF2
  2592                           intcon2	equ	0xFF1
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           postdec1	equ	0xFE5
  2596                           fsr1l	equ	0xFE1
  2597                           indf2	equ	0xFDF
  2598                           postinc2	equ	0xFDE
  2599                           postdec2	equ	0xFDD
  2600                           fsr2h	equ	0xFDA
  2601                           fsr2l	equ	0xFD9
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function ___lwmod *****************
  2605 ;; Defined at:
  2606 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  dividend        2   31[COMRAM] unsigned int 
  2609 ;;  divisor         2   33[COMRAM] unsigned int 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  counter         1   35[COMRAM] unsigned char 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  2   31[COMRAM] unsigned int 
  2614 ;; Registers used:
  2615 ;;		wreg, status,2, status,0
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2621 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;Total ram usage:        5 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    2
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_display120sec_Int
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text11
  2636  001E1A                     __ptext11:
  2637                           	opt stack 0
  2638  001E1A                     ___lwmod:
  2639                           	opt stack 26
  2640                           
  2641                           ;incstack = 0
  2642  001E1A  5022               	movf	___lwmod@divisor,w,c
  2643  001E1C  1023               	iorwf	___lwmod@divisor+1,w,c
  2644  001E1E  B4D8               	btfsc	status,2,c
  2645  001E20  D018               	goto	l800
  2646  001E22  0E01               	movlw	1
  2647  001E24  6E24               	movwf	___lwmod@counter,c
  2648  001E26  D004               	goto	l795
  2649  001E28  90D8               	bcf	status,0,c
  2650  001E2A  3622               	rlcf	___lwmod@divisor,f,c
  2651  001E2C  3623               	rlcf	___lwmod@divisor+1,f,c
  2652  001E2E  2A24               	incf	___lwmod@counter,f,c
  2653  001E30                     l795:
  2654  001E30  AE23               	btfss	___lwmod@divisor+1,7,c
  2655  001E32  D7FA               	goto	l796
  2656  001E34                     u1760:
  2657  001E34  5022               	movf	___lwmod@divisor,w,c
  2658  001E36  5C20               	subwf	___lwmod@dividend,w,c
  2659  001E38  5023               	movf	___lwmod@divisor+1,w,c
  2660  001E3A  5821               	subwfb	___lwmod@dividend+1,w,c
  2661  001E3C  A0D8               	btfss	status,0,c
  2662  001E3E  D004               	goto	l799
  2663  001E40  5022               	movf	___lwmod@divisor,w,c
  2664  001E42  5E20               	subwf	___lwmod@dividend,f,c
  2665  001E44  5023               	movf	___lwmod@divisor+1,w,c
  2666  001E46  5A21               	subwfb	___lwmod@dividend+1,f,c
  2667  001E48                     l799:
  2668  001E48  90D8               	bcf	status,0,c
  2669  001E4A  3223               	rrcf	___lwmod@divisor+1,f,c
  2670  001E4C  3222               	rrcf	___lwmod@divisor,f,c
  2671  001E4E  2E24               	decfsz	___lwmod@counter,f,c
  2672  001E50  D7F1               	goto	u1760
  2673  001E52                     l800:
  2674  001E52  C020  F020         	movff	___lwmod@dividend,?___lwmod
  2675  001E56  C021  F021         	movff	___lwmod@dividend+1,?___lwmod+1
  2676  001E5A  0012               	return		;funcret
  2677  001E5C                     __end_of___lwmod:
  2678                           	opt stack 0
  2679                           tblptru	equ	0xFF8
  2680                           tblptrh	equ	0xFF7
  2681                           tblptrl	equ	0xFF6
  2682                           tablat	equ	0xFF5
  2683                           intcon	equ	0xFF2
  2684                           intcon2	equ	0xFF1
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           postdec1	equ	0xFE5
  2688                           fsr1l	equ	0xFE1
  2689                           indf2	equ	0xFDF
  2690                           postinc2	equ	0xFDE
  2691                           postdec2	equ	0xFDD
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function ___lwdiv *****************
  2697 ;; Defined at:
  2698 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  dividend        2   24[COMRAM] unsigned int 
  2701 ;;  divisor         2   26[COMRAM] unsigned int 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  quotient        2   29[COMRAM] unsigned int 
  2704 ;;  counter         1   28[COMRAM] unsigned char 
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  2   24[COMRAM] unsigned int 
  2707 ;; Registers used:
  2708 ;;		wreg, status,2, status,0
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;Total ram usage:        7 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    2
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_display120sec_Int
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text12
  2729  001D7C                     __ptext12:
  2730                           	opt stack 0
  2731  001D7C                     ___lwdiv:
  2732                           	opt stack 26
  2733                           
  2734                           ;incstack = 0
  2735  001D7C  0E00               	movlw	0
  2736  001D7E  6E1F               	movwf	___lwdiv@quotient+1,c
  2737  001D80  0E00               	movlw	0
  2738  001D82  6E1E               	movwf	___lwdiv@quotient,c
  2739  001D84  501B               	movf	___lwdiv@divisor,w,c
  2740  001D86  101C               	iorwf	___lwdiv@divisor+1,w,c
  2741  001D88  B4D8               	btfsc	status,2,c
  2742  001D8A  D01C               	goto	l790
  2743  001D8C  0E01               	movlw	1
  2744  001D8E  6E1D               	movwf	___lwdiv@counter,c
  2745  001D90  D004               	goto	l785
  2746  001D92  90D8               	bcf	status,0,c
  2747  001D94  361B               	rlcf	___lwdiv@divisor,f,c
  2748  001D96  361C               	rlcf	___lwdiv@divisor+1,f,c
  2749  001D98  2A1D               	incf	___lwdiv@counter,f,c
  2750  001D9A                     l785:
  2751  001D9A  AE1C               	btfss	___lwdiv@divisor+1,7,c
  2752  001D9C  D7FA               	goto	l786
  2753  001D9E                     u1730:
  2754  001D9E  90D8               	bcf	status,0,c
  2755  001DA0  361E               	rlcf	___lwdiv@quotient,f,c
  2756  001DA2  361F               	rlcf	___lwdiv@quotient+1,f,c
  2757  001DA4  501B               	movf	___lwdiv@divisor,w,c
  2758  001DA6  5C19               	subwf	___lwdiv@dividend,w,c
  2759  001DA8  501C               	movf	___lwdiv@divisor+1,w,c
  2760  001DAA  581A               	subwfb	___lwdiv@dividend+1,w,c
  2761  001DAC  A0D8               	btfss	status,0,c
  2762  001DAE  D005               	goto	l789
  2763  001DB0  501B               	movf	___lwdiv@divisor,w,c
  2764  001DB2  5E19               	subwf	___lwdiv@dividend,f,c
  2765  001DB4  501C               	movf	___lwdiv@divisor+1,w,c
  2766  001DB6  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  2767  001DB8  801E               	bsf	___lwdiv@quotient,0,c
  2768  001DBA                     l789:
  2769  001DBA  90D8               	bcf	status,0,c
  2770  001DBC  321C               	rrcf	___lwdiv@divisor+1,f,c
  2771  001DBE  321B               	rrcf	___lwdiv@divisor,f,c
  2772  001DC0  2E1D               	decfsz	___lwdiv@counter,f,c
  2773  001DC2  D7ED               	goto	u1730
  2774  001DC4                     l790:
  2775  001DC4  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  2776  001DC8  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2777  001DCC  0012               	return		;funcret
  2778  001DCE                     __end_of___lwdiv:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           intcon	equ	0xFF2
  2785                           intcon2	equ	0xFF1
  2786                           postinc0	equ	0xFEE
  2787                           wreg	equ	0xFE8
  2788                           postdec1	equ	0xFE5
  2789                           fsr1l	equ	0xFE1
  2790                           indf2	equ	0xFDF
  2791                           postinc2	equ	0xFDE
  2792                           postdec2	equ	0xFDD
  2793                           fsr2h	equ	0xFDA
  2794                           fsr2l	equ	0xFD9
  2795                           status	equ	0xFD8
  2796                           
  2797 ;; *************** function _endLCD *****************
  2798 ;; Defined at:
  2799 ;;		line 509 in file "the3.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;		None
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;		None
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  1    wreg      void 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;Total ram usage:        0 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    5
  2820 ;; This function calls:
  2821 ;;		_WriteCommandToLCD
  2822 ;;		_WriteStringToLCD
  2823 ;; This function is called by:
  2824 ;;		_main
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text13
  2829  001F8A                     __ptext13:
  2830                           	opt stack 0
  2831  001F8A                     _endLCD:
  2832                           	opt stack 25
  2833                           
  2834                           ;the3.c: 511: WriteCommandToLCD(0x80);
  2835                           
  2836                           ;incstack = 0
  2837  001F8A  0E80               	movlw	128
  2838  001F8C  EC74  F00F         	call	_WriteCommandToLCD
  2839                           
  2840                           ;the3.c: 512: WriteStringToLCD("Safe is opening!");
  2841  001F90  0E56               	movlw	low STR_11
  2842  001F92  6E1A               	movwf	WriteStringToLCD@s,c
  2843  001F94  0E10               	movlw	high STR_11
  2844  001F96  6E1B               	movwf	WriteStringToLCD@s+1,c
  2845  001F98  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  2846                           
  2847                           ;the3.c: 513: WriteCommandToLCD(0xC0);
  2848  001F9C  0EC0               	movlw	192
  2849  001F9E  EC74  F00F         	call	_WriteCommandToLCD
  2850                           
  2851                           ;the3.c: 514: WriteStringToLCD("$$$$$$$$$$$$$$$$");
  2852  001FA2  0E67               	movlw	low STR_12
  2853  001FA4  6E1A               	movwf	WriteStringToLCD@s,c
  2854  001FA6  0E10               	movlw	high STR_12
  2855  001FA8  6E1B               	movwf	WriteStringToLCD@s+1,c
  2856  001FAA  EC8A  F00F         	call	_WriteStringToLCD	;wreg free
  2857  001FAE  0012               	return		;funcret
  2858  001FB0                     __end_of_endLCD:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           intcon	equ	0xFF2
  2865                           intcon2	equ	0xFF1
  2866                           postinc0	equ	0xFEE
  2867                           wreg	equ	0xFE8
  2868                           postdec1	equ	0xFE5
  2869                           fsr1l	equ	0xFE1
  2870                           indf2	equ	0xFDF
  2871                           postinc2	equ	0xFDE
  2872                           postdec2	equ	0xFDD
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _WriteStringToLCD *****************
  2878 ;; Defined at:
  2879 ;;		line 115 in file "LCD.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  s               2   25[COMRAM] PTR const unsigned char 
  2882 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
  2883 ;;		 -> STR_10(5), STR_9(12), STR_8(12), STR_7(7), 
  2884 ;;		 -> STR_6(7), STR_5(17), STR_4(17), STR_3(12), 
  2885 ;;		 -> STR_2(17), STR_1(17), 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2897 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;Total ram usage:        2 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    4
  2904 ;; This function calls:
  2905 ;;		_WriteDataToLCD
  2906 ;; This function is called by:
  2907 ;;		_first_message
  2908 ;;		_set_a_pin_message
  2909 ;;		_show_password
  2910 ;;		_enter_pin
  2911 ;;		_endLCD
  2912 ;;		_write_wait_20sec
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text14
  2917  001F14                     __ptext14:
  2918                           	opt stack 0
  2919  001F14                     _WriteStringToLCD:
  2920                           	opt stack 25
  2921                           
  2922                           ;LCD.c: 117: while(*s)
  2923                           
  2924                           ;incstack = 0
  2925  001F14  D00A               	goto	l71
  2926  001F16                     
  2927                           ;LCD.c: 118: WriteDataToLCD(*s++);
  2928  001F16  C01A  FFF6         	movff	WriteStringToLCD@s,tblptrl
  2929  001F1A  C01B  FFF7         	movff	WriteStringToLCD@s+1,tblptrh
  2930  001F1E                     	if	0	;tblptru may be non-zero
  2931  001F1E                     	endif
  2932  001F1E                     	if	0	;tblptru may be non-zero
  2933  001F1E                     	endif
  2934  001F1E  0008               	tblrd		*
  2935  001F20  50F5               	movf	tablat,w,c
  2936  001F22  EC5E  F00F         	call	_WriteDataToLCD
  2937  001F26  4A1A               	infsnz	WriteStringToLCD@s,f,c
  2938  001F28  2A1B               	incf	WriteStringToLCD@s+1,f,c
  2939  001F2A                     l71:
  2940  001F2A  C01A  FFF6         	movff	WriteStringToLCD@s,tblptrl
  2941  001F2E  C01B  FFF7         	movff	WriteStringToLCD@s+1,tblptrh
  2942  001F32                     	if	0	;tblptru may be non-zero
  2943  001F32                     	endif
  2944  001F32                     	if	0	;tblptru may be non-zero
  2945  001F32                     	endif
  2946  001F32  0008               	tblrd		*
  2947  001F34  50F5               	movf	tablat,w,c
  2948  001F36  0900               	iorlw	0
  2949  001F38  B4D8               	btfsc	status,2,c
  2950  001F3A  0012               	return	
  2951  001F3C  D7EC               	goto	l72
  2952  001F3E                     __end_of_WriteStringToLCD:
  2953                           	opt stack 0
  2954                           tblptru	equ	0xFF8
  2955                           tblptrh	equ	0xFF7
  2956                           tblptrl	equ	0xFF6
  2957                           tablat	equ	0xFF5
  2958                           intcon	equ	0xFF2
  2959                           intcon2	equ	0xFF1
  2960                           postinc0	equ	0xFEE
  2961                           wreg	equ	0xFE8
  2962                           postdec1	equ	0xFE5
  2963                           fsr1l	equ	0xFE1
  2964                           indf2	equ	0xFDF
  2965                           postinc2	equ	0xFDE
  2966                           postdec2	equ	0xFDD
  2967                           fsr2h	equ	0xFDA
  2968                           fsr2l	equ	0xFD9
  2969                           status	equ	0xFD8
  2970                           
  2971 ;; *************** function _WriteDataToLCD *****************
  2972 ;; Defined at:
  2973 ;;		line 28 in file "LCD.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  LCDChar         1    wreg     unsigned char 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  LCDChar         1   24[COMRAM] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0, cstack
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;Total ram usage:        1 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    3
  2994 ;; This function calls:
  2995 ;;		_ToggleEpinOfLCD
  2996 ;; This function is called by:
  2997 ;;		_WriteStringToLCD
  2998 ;;		_set_a_pin_message
  2999 ;;		_show_password
  3000 ;;		_enter_pin
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text15
  3005  001EBC                     __ptext15:
  3006                           	opt stack 0
  3007  001EBC                     _WriteDataToLCD:
  3008                           	opt stack 25
  3009                           
  3010                           ;incstack = 0
  3011                           ;WriteDataToLCD@LCDChar stored from wreg
  3012  001EBC  6E19               	movwf	WriteDataToLCD@LCDChar,c
  3013                           
  3014                           ;LCD.c: 30: LATB2 = 1;
  3015  001EBE  848A               	bsf	3978,2,c	;volatile
  3016                           
  3017                           ;LCD.c: 32: PORTD = PORTD & 0x0F;
  3018  001EC0  5083               	movf	3971,w,c	;volatile
  3019  001EC2  0B0F               	andlw	15
  3020  001EC4  6E83               	movwf	3971,c	;volatile
  3021                           
  3022                           ;LCD.c: 33: PORTD = PORTD | (LCDChar&0xF0);
  3023  001EC6  5019               	movf	WriteDataToLCD@LCDChar,w,c
  3024  001EC8  0BF0               	andlw	240
  3025  001ECA  1083               	iorwf	3971,w,c	;volatile
  3026  001ECC  6E83               	movwf	3971,c	;volatile
  3027                           
  3028                           ;LCD.c: 34: ToggleEpinOfLCD();
  3029  001ECE  ECF0  F00F         	call	_ToggleEpinOfLCD	;wreg free
  3030                           
  3031                           ;LCD.c: 36: PORTD = PORTD & 0x0F;
  3032  001ED2  5083               	movf	3971,w,c	;volatile
  3033  001ED4  0B0F               	andlw	15
  3034  001ED6  6E83               	movwf	3971,c	;volatile
  3035                           
  3036                           ;LCD.c: 37: PORTD = PORTD | ((LCDChar<<4)& 0xF0);
  3037  001ED8  3819               	swapf	WriteDataToLCD@LCDChar,w,c
  3038  001EDA  0BF0               	andlw	240
  3039  001EDC  0BF0               	andlw	240
  3040  001EDE  1083               	iorwf	3971,w,c	;volatile
  3041  001EE0  6E83               	movwf	3971,c	;volatile
  3042                           
  3043                           ;LCD.c: 40: ToggleEpinOfLCD();
  3044  001EE2  ECF0  F00F         	call	_ToggleEpinOfLCD	;wreg free
  3045  001EE6  0012               	return		;funcret
  3046  001EE8                     __end_of_WriteDataToLCD:
  3047                           	opt stack 0
  3048                           tblptru	equ	0xFF8
  3049                           tblptrh	equ	0xFF7
  3050                           tblptrl	equ	0xFF6
  3051                           tablat	equ	0xFF5
  3052                           intcon	equ	0xFF2
  3053                           intcon2	equ	0xFF1
  3054                           postinc0	equ	0xFEE
  3055                           wreg	equ	0xFE8
  3056                           postdec1	equ	0xFE5
  3057                           fsr1l	equ	0xFE1
  3058                           indf2	equ	0xFDF
  3059                           postinc2	equ	0xFDE
  3060                           postdec2	equ	0xFDD
  3061                           fsr2h	equ	0xFDA
  3062                           fsr2l	equ	0xFD9
  3063                           status	equ	0xFD8
  3064                           
  3065 ;; *************** function _delay_3_sec *****************
  3066 ;; Defined at:
  3067 ;;		line 188 in file "the3.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;		None
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  c               2   35[COMRAM] int 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      void 
  3074 ;; Registers used:
  3075 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;Total ram usage:        4 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    3
  3088 ;; This function calls:
  3089 ;;		_display_7_segment
  3090 ;; This function is called by:
  3091 ;;		_main
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text16
  3096  001D28                     __ptext16:
  3097                           	opt stack 0
  3098  001D28                     _delay_3_sec:
  3099                           	opt stack 27
  3100                           
  3101                           ;the3.c: 190: int c;
  3102                           ;the3.c: 191: c = 0;
  3103                           
  3104                           ;incstack = 0
  3105  001D28  0E00               	movlw	0
  3106  001D2A  6E25               	movwf	delay_3_sec@c+1,c
  3107  001D2C  0E00               	movlw	0
  3108  001D2E  6E24               	movwf	delay_3_sec@c,c
  3109                           
  3110                           ;the3.c: 192: while(c++ < 1481){
  3111  001D30  D012               	goto	l245
  3112  001D32                     
  3113                           ;the3.c: 193: display_7_segment(10,10,10,10);
  3114  001D32  0E00               	movlw	0
  3115  001D34  6E1A               	movwf	display_7_segment@d0+1,c
  3116  001D36  0E0A               	movlw	10
  3117  001D38  6E19               	movwf	display_7_segment@d0,c
  3118  001D3A  0E00               	movlw	0
  3119  001D3C  6E1C               	movwf	display_7_segment@d1+1,c
  3120  001D3E  0E0A               	movlw	10
  3121  001D40  6E1B               	movwf	display_7_segment@d1,c
  3122  001D42  0E00               	movlw	0
  3123  001D44  6E1E               	movwf	display_7_segment@d2+1,c
  3124  001D46  0E0A               	movlw	10
  3125  001D48  6E1D               	movwf	display_7_segment@d2,c
  3126  001D4A  0E00               	movlw	0
  3127  001D4C  6E20               	movwf	display_7_segment@d3+1,c
  3128  001D4E  0E0A               	movlw	10
  3129  001D50  6E1F               	movwf	display_7_segment@d3,c
  3130  001D52  ECFB  F00C         	call	_display_7_segment	;wreg free
  3131  001D56                     l245:
  3132  001D56  5024               	movf	delay_3_sec@c,w,c
  3133  001D58  6E22               	movwf	??_delay_3_sec& (0+255),c
  3134  001D5A  5025               	movf	delay_3_sec@c+1,w,c
  3135  001D5C  6E23               	movwf	(??_delay_3_sec+1)& (0+255),c
  3136  001D5E  4A24               	infsnz	delay_3_sec@c,f,c
  3137  001D60  2A25               	incf	delay_3_sec@c+1,f,c
  3138  001D62  BE23               	btfsc	??_delay_3_sec+1,7,c
  3139  001D64  D7E6               	goto	l246
  3140  001D66  0EC9               	movlw	201
  3141  001D68  5C22               	subwf	??_delay_3_sec,w,c
  3142  001D6A  0E05               	movlw	5
  3143  001D6C  5823               	subwfb	??_delay_3_sec+1,w,c
  3144  001D6E  A0D8               	btfss	status,0,c
  3145  001D70  D7E0               	goto	l246
  3146                           
  3147                           ;the3.c: 194: }
  3148                           ;the3.c: 195: c=0;
  3149  001D72  0E00               	movlw	0
  3150  001D74  6E25               	movwf	delay_3_sec@c+1,c
  3151  001D76  0E00               	movlw	0
  3152  001D78  6E24               	movwf	delay_3_sec@c,c
  3153  001D7A  0012               	return		;funcret
  3154  001D7C                     __end_of_delay_3_sec:
  3155                           	opt stack 0
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           intcon	equ	0xFF2
  3161                           intcon2	equ	0xFF1
  3162                           postinc0	equ	0xFEE
  3163                           wreg	equ	0xFE8
  3164                           postdec1	equ	0xFE5
  3165                           fsr1l	equ	0xFE1
  3166                           indf2	equ	0xFDF
  3167                           postinc2	equ	0xFDE
  3168                           postdec2	equ	0xFDD
  3169                           fsr2h	equ	0xFDA
  3170                           fsr2l	equ	0xFD9
  3171                           status	equ	0xFD8
  3172                           
  3173 ;; *************** function _check_correct_pass *****************
  3174 ;; Defined at:
  3175 ;;		line 525 in file "the3.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;		None
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  i               2   30[COMRAM] unsigned int 
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  2   24[COMRAM] int 
  3182 ;; Registers used:
  3183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3189 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;Total ram usage:        8 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    2
  3196 ;; This function calls:
  3197 ;;		Nothing
  3198 ;; This function is called by:
  3199 ;;		_main
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text17
  3204  001C6A                     __ptext17:
  3205                           	opt stack 0
  3206  001C6A                     _check_correct_pass:
  3207                           	opt stack 28
  3208                           
  3209                           ;the3.c: 527: for(unsigned int i=0 ; i<4; i++)
  3210                           
  3211                           ;incstack = 0
  3212  001C6A  0E00               	movlw	0
  3213  001C6C  6E20               	movwf	check_correct_pass@i+1,c
  3214  001C6E  0E00               	movlw	0
  3215  001C70  6E1F               	movwf	check_correct_pass@i,c
  3216  001C72                     l2281:
  3217  001C72  5020               	movf	check_correct_pass@i+1,w,c
  3218  001C74  E125               	bnz	l2295
  3219  001C76  0E04               	movlw	4
  3220  001C78  5C1F               	subwf	check_correct_pass@i,w,c
  3221  001C7A  B0D8               	btfsc	status,0,c
  3222  001C7C  D021               	goto	u1210
  3223                           
  3224                           ;the3.c: 528: {
  3225                           ;the3.c: 529: if(entered_pass[i]!=password_int[i])
  3226  001C7E  90D8               	bcf	status,0,c
  3227  001C80  341F               	rlcf	check_correct_pass@i,w,c
  3228  001C82  6ED9               	movwf	fsr2l,c
  3229  001C84  3420               	rlcf	check_correct_pass@i+1,w,c
  3230  001C86  6EDA               	movwf	fsr2h,c
  3231  001C88  0E8E               	movlw	low _password_int
  3232  001C8A  26D9               	addwf	fsr2l,f,c
  3233  001C8C  0E00               	movlw	high _password_int
  3234  001C8E  22DA               	addwfc	fsr2h,f,c
  3235  001C90  90D8               	bcf	status,0,c
  3236  001C92  341F               	rlcf	check_correct_pass@i,w,c
  3237  001C94  6EE1               	movwf	fsr1l,c
  3238  001C96  3420               	rlcf	check_correct_pass@i+1,w,c
  3239  001C98  6EE2               	movwf	fsr1h,c
  3240  001C9A  0E86               	movlw	low _entered_pass
  3241  001C9C  26E1               	addwf	fsr1l,f,c
  3242  001C9E  0E00               	movlw	high _entered_pass
  3243  001CA0  22E2               	addwfc	fsr1h,f,c
  3244  001CA2  50DE               	movf	postinc2,w,c
  3245  001CA4  18E6               	xorwf	postinc1,w,c
  3246  001CA6  E104               	bnz	u1200
  3247  001CA8  50DE               	movf	postinc2,w,c
  3248  001CAA  18E6               	xorwf	postinc1,w,c
  3249  001CAC  B4D8               	btfsc	status,2,c
  3250  001CAE  D005               	goto	l346
  3251  001CB0                     u1200:
  3252                           
  3253                           ;the3.c: 530: return 0;
  3254  001CB0  0E00               	movlw	0
  3255  001CB2  6E1A               	movwf	?_check_correct_pass+1,c
  3256  001CB4  0E00               	movlw	0
  3257  001CB6  6E19               	movwf	?_check_correct_pass,c
  3258  001CB8  0012               	return	
  3259  001CBA                     l346:
  3260  001CBA  4A1F               	infsnz	check_correct_pass@i,f,c
  3261  001CBC  2A20               	incf	check_correct_pass@i+1,f,c
  3262  001CBE  D7D9               	goto	l2281
  3263  001CC0                     u1210:
  3264  001CC0                     l2295:
  3265                           
  3266                           ;the3.c: 531: }
  3267                           ;the3.c: 532: return 1;
  3268  001CC0  0E00               	movlw	0
  3269  001CC2  6E1A               	movwf	?_check_correct_pass+1,c
  3270  001CC4  0E01               	movlw	1
  3271  001CC6  6E19               	movwf	?_check_correct_pass,c
  3272  001CC8  0012               	return	
  3273  001CCA                     __end_of_check_correct_pass:
  3274                           	opt stack 0
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           intcon	equ	0xFF2
  3280                           intcon2	equ	0xFF1
  3281                           postinc0	equ	0xFEE
  3282                           wreg	equ	0xFE8
  3283                           postinc1	equ	0xFE6
  3284                           postdec1	equ	0xFE5
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           indf2	equ	0xFDF
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           fsr2h	equ	0xFDA
  3291                           fsr2l	equ	0xFD9
  3292                           status	equ	0xFD8
  3293                           
  3294 ;; *************** function _RE1button *****************
  3295 ;; Defined at:
  3296 ;;		line 233 in file "the3.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;		None
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;		None
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      void 
  3303 ;; Registers used:
  3304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;Total ram usage:        0 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    5
  3317 ;; This function calls:
  3318 ;;		_ClearLCDScreen
  3319 ;;		_display_7_segment
  3320 ;; This function is called by:
  3321 ;;		_main
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text18
  3326  001CCA                     __ptext18:
  3327                           	opt stack 0
  3328  001CCA                     _RE1button:
  3329                           	opt stack 25
  3330                           
  3331                           ;the3.c: 234: RBIE = 0;
  3332                           
  3333                           ;incstack = 0
  3334  001CCA  96F2               	bcf	intcon,3,c	;volatile
  3335                           
  3336                           ;the3.c: 235: while(PORTEbits.RE1){
  3337  001CCC  D012               	goto	l259
  3338  001CCE                     
  3339                           ;the3.c: 236: display_7_segment(10,10,10,10);
  3340  001CCE  0E00               	movlw	0
  3341  001CD0  6E1A               	movwf	display_7_segment@d0+1,c
  3342  001CD2  0E0A               	movlw	10
  3343  001CD4  6E19               	movwf	display_7_segment@d0,c
  3344  001CD6  0E00               	movlw	0
  3345  001CD8  6E1C               	movwf	display_7_segment@d1+1,c
  3346  001CDA  0E0A               	movlw	10
  3347  001CDC  6E1B               	movwf	display_7_segment@d1,c
  3348  001CDE  0E00               	movlw	0
  3349  001CE0  6E1E               	movwf	display_7_segment@d2+1,c
  3350  001CE2  0E0A               	movlw	10
  3351  001CE4  6E1D               	movwf	display_7_segment@d2,c
  3352  001CE6  0E00               	movlw	0
  3353  001CE8  6E20               	movwf	display_7_segment@d3+1,c
  3354  001CEA  0E0A               	movlw	10
  3355  001CEC  6E1F               	movwf	display_7_segment@d3,c
  3356  001CEE  ECFB  F00C         	call	_display_7_segment	;wreg free
  3357  001CF2                     l259:
  3358  001CF2  A284               	btfss	3972,1,c	;volatile
  3359  001CF4  D013               	goto	l262
  3360  001CF6  D7EB               	goto	l260
  3361  001CF8                     
  3362                           ;the3.c: 239: display_7_segment(10,10,10,10);
  3363  001CF8  0E00               	movlw	0
  3364  001CFA  6E1A               	movwf	display_7_segment@d0+1,c
  3365  001CFC  0E0A               	movlw	10
  3366  001CFE  6E19               	movwf	display_7_segment@d0,c
  3367  001D00  0E00               	movlw	0
  3368  001D02  6E1C               	movwf	display_7_segment@d1+1,c
  3369  001D04  0E0A               	movlw	10
  3370  001D06  6E1B               	movwf	display_7_segment@d1,c
  3371  001D08  0E00               	movlw	0
  3372  001D0A  6E1E               	movwf	display_7_segment@d2+1,c
  3373  001D0C  0E0A               	movlw	10
  3374  001D0E  6E1D               	movwf	display_7_segment@d2,c
  3375  001D10  0E00               	movlw	0
  3376  001D12  6E20               	movwf	display_7_segment@d3+1,c
  3377  001D14  0E0A               	movlw	10
  3378  001D16  6E1F               	movwf	display_7_segment@d3,c
  3379  001D18  ECFB  F00C         	call	_display_7_segment	;wreg free
  3380  001D1C                     l262:
  3381  001D1C  A284               	btfss	3972,1,c	;volatile
  3382  001D1E  D7EC               	goto	l263
  3383                           
  3384                           ;the3.c: 240: }
  3385                           ;the3.c: 241: ClearLCDScreen();
  3386  001D20  ECE4  F00F         	call	_ClearLCDScreen	;wreg free
  3387                           
  3388                           ;the3.c: 242: RBIE = 1;
  3389  001D24  86F2               	bsf	intcon,3,c	;volatile
  3390  001D26  0012               	return		;funcret
  3391  001D28                     __end_of_RE1button:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           intcon	equ	0xFF2
  3398                           intcon2	equ	0xFF1
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           postinc1	equ	0xFE6
  3402                           postdec1	equ	0xFE5
  3403                           fsr1h	equ	0xFE2
  3404                           fsr1l	equ	0xFE1
  3405                           indf2	equ	0xFDF
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _display_7_segment *****************
  3413 ;; Defined at:
  3414 ;;		line 145 in file "the3.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  d0              2   24[COMRAM] int 
  3417 ;;  d1              2   26[COMRAM] int 
  3418 ;;  d2              2   28[COMRAM] int 
  3419 ;;  d3              2   30[COMRAM] int 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  symbols        24    0[BANK0 ] int [12]
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      void 
  3424 ;; Registers used:
  3425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3431 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Totals:         9      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;Total ram usage:       33 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    2
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		_delay_3_sec
  3442 ;;		_RE1button
  3443 ;;		_display120sec_Int
  3444 ;;		_main
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text19
  3449  0019F6                     __ptext19:
  3450                           	opt stack 0
  3451  0019F6                     _display_7_segment:
  3452                           	opt stack 26
  3453                           
  3454                           ;the3.c: 148: LATH = LATH & 0xF0;
  3455                           
  3456                           ;incstack = 0
  3457  0019F6  5090               	movf	3984,w,c	;volatile
  3458  0019F8  0BF0               	andlw	240
  3459  0019FA  6E90               	movwf	3984,c	;volatile
  3460                           
  3461                           ;the3.c: 150: int symbols[]={
  3462                           ;the3.c: 151: 0b00111111,
  3463                           ;the3.c: 152: 0b00000110,
  3464                           ;the3.c: 153: 0b01011011,
  3465                           ;the3.c: 154: 0b01001111,
  3466                           ;the3.c: 155: 0b01100110,
  3467                           ;the3.c: 156: 0b01101101,
  3468                           ;the3.c: 157: 0b01111101,
  3469                           ;the3.c: 158: 0b00000111,
  3470                           ;the3.c: 159: 0b01111111,
  3471                           ;the3.c: 160: 0b01100111,
  3472                           ;the3.c: 161: 0b01000000,
  3473                           ;the3.c: 162: 0b00000000
  3474                           ;the3.c: 163: };
  3475  0019FC  EE20  F0A0         	lfsr	2,display_7_segment@F5548
  3476  001A00  EE10  F060         	lfsr	1,display_7_segment@symbols
  3477  001A04  0E17               	movlw	23
  3478  001A06                     u1711:
  3479  001A06  CFDB FFE3          	movff	plusw2,plusw1
  3480  001A0A  06E8               	decf	wreg,f,c
  3481  001A0C  E2FC               	bc	u1711
  3482                           
  3483                           ;the3.c: 166: LATJ = symbols[d3];
  3484  001A0E  90D8               	bcf	status,0,c
  3485  001A10  341F               	rlcf	display_7_segment@d3,w,c
  3486  001A12  6ED9               	movwf	fsr2l,c
  3487  001A14  3420               	rlcf	display_7_segment@d3+1,w,c
  3488  001A16  6EDA               	movwf	fsr2h,c
  3489  001A18  0E60               	movlw	low display_7_segment@symbols
  3490  001A1A  26D9               	addwf	fsr2l,f,c
  3491  001A1C  0E00               	movlw	high display_7_segment@symbols
  3492  001A1E  22DA               	addwfc	fsr2h,f,c
  3493  001A20  50DF               	movf	indf2,w,c
  3494  001A22  6E91               	movwf	3985,c	;volatile
  3495                           
  3496                           ;the3.c: 167: LATH3 = 1;
  3497  001A24  8690               	bsf	3984,3,c	;volatile
  3498                           
  3499                           ;the3.c: 168: _delay((unsigned long)((500)*(40000000/4000000.0)));
  3500  001A26  0E07               	movlw	7
  3501  001A28  6E21               	movwf	??_display_7_segment& (0+255),c
  3502  001A2A  0E7D               	movlw	125
  3503  001A2C                     u2037:
  3504  001A2C  2EE8               	decfsz	wreg,f,c
  3505  001A2E  D7FE               	bra	u2037
  3506  001A30  2E21               	decfsz	??_display_7_segment& (0+255),f,c
  3507  001A32  D7FC               	bra	u2037
  3508  001A34  F000               	nop	
  3509                           
  3510                           ;the3.c: 169: LATH3 = 0;
  3511  001A36  9690               	bcf	3984,3,c	;volatile
  3512                           
  3513                           ;the3.c: 171: LATJ = symbols[d2];
  3514  001A38  90D8               	bcf	status,0,c
  3515  001A3A  341D               	rlcf	display_7_segment@d2,w,c
  3516  001A3C  6ED9               	movwf	fsr2l,c
  3517  001A3E  341E               	rlcf	display_7_segment@d2+1,w,c
  3518  001A40  6EDA               	movwf	fsr2h,c
  3519  001A42  0E60               	movlw	low display_7_segment@symbols
  3520  001A44  26D9               	addwf	fsr2l,f,c
  3521  001A46  0E00               	movlw	high display_7_segment@symbols
  3522  001A48  22DA               	addwfc	fsr2h,f,c
  3523  001A4A  50DF               	movf	indf2,w,c
  3524  001A4C  6E91               	movwf	3985,c	;volatile
  3525                           
  3526                           ;the3.c: 172: LATH2 = 1;
  3527  001A4E  8490               	bsf	3984,2,c	;volatile
  3528                           
  3529                           ;the3.c: 173: _delay((unsigned long)((500)*(40000000/4000000.0)));
  3530  001A50  0E07               	movlw	7
  3531  001A52  6E21               	movwf	??_display_7_segment& (0+255),c
  3532  001A54  0E7D               	movlw	125
  3533  001A56                     u2047:
  3534  001A56  2EE8               	decfsz	wreg,f,c
  3535  001A58  D7FE               	bra	u2047
  3536  001A5A  2E21               	decfsz	??_display_7_segment& (0+255),f,c
  3537  001A5C  D7FC               	bra	u2047
  3538  001A5E  F000               	nop	
  3539                           
  3540                           ;the3.c: 174: LATH2 = 0;
  3541  001A60  9490               	bcf	3984,2,c	;volatile
  3542                           
  3543                           ;the3.c: 176: LATJ = symbols[d1];
  3544  001A62  90D8               	bcf	status,0,c
  3545  001A64  341B               	rlcf	display_7_segment@d1,w,c
  3546  001A66  6ED9               	movwf	fsr2l,c
  3547  001A68  341C               	rlcf	display_7_segment@d1+1,w,c
  3548  001A6A  6EDA               	movwf	fsr2h,c
  3549  001A6C  0E60               	movlw	low display_7_segment@symbols
  3550  001A6E  26D9               	addwf	fsr2l,f,c
  3551  001A70  0E00               	movlw	high display_7_segment@symbols
  3552  001A72  22DA               	addwfc	fsr2h,f,c
  3553  001A74  50DF               	movf	indf2,w,c
  3554  001A76  6E91               	movwf	3985,c	;volatile
  3555                           
  3556                           ;the3.c: 177: LATH1 = 1;
  3557  001A78  8290               	bsf	3984,1,c	;volatile
  3558                           
  3559                           ;the3.c: 178: _delay((unsigned long)((500)*(40000000/4000000.0)));
  3560  001A7A  0E07               	movlw	7
  3561  001A7C  6E21               	movwf	??_display_7_segment& (0+255),c
  3562  001A7E  0E7D               	movlw	125
  3563  001A80                     u2057:
  3564  001A80  2EE8               	decfsz	wreg,f,c
  3565  001A82  D7FE               	bra	u2057
  3566  001A84  2E21               	decfsz	??_display_7_segment& (0+255),f,c
  3567  001A86  D7FC               	bra	u2057
  3568  001A88  F000               	nop	
  3569                           
  3570                           ;the3.c: 179: LATH1 = 0;
  3571  001A8A  9290               	bcf	3984,1,c	;volatile
  3572                           
  3573                           ;the3.c: 181: LATJ = symbols[d0];
  3574  001A8C  90D8               	bcf	status,0,c
  3575  001A8E  3419               	rlcf	display_7_segment@d0,w,c
  3576  001A90  6ED9               	movwf	fsr2l,c
  3577  001A92  341A               	rlcf	display_7_segment@d0+1,w,c
  3578  001A94  6EDA               	movwf	fsr2h,c
  3579  001A96  0E60               	movlw	low display_7_segment@symbols
  3580  001A98  26D9               	addwf	fsr2l,f,c
  3581  001A9A  0E00               	movlw	high display_7_segment@symbols
  3582  001A9C  22DA               	addwfc	fsr2h,f,c
  3583  001A9E  50DF               	movf	indf2,w,c
  3584  001AA0  6E91               	movwf	3985,c	;volatile
  3585                           
  3586                           ;the3.c: 182: LATH0 = 1;
  3587  001AA2  8090               	bsf	3984,0,c	;volatile
  3588                           
  3589                           ;the3.c: 183: _delay((unsigned long)((500)*(40000000/4000000.0)));
  3590  001AA4  0E07               	movlw	7
  3591  001AA6  6E21               	movwf	??_display_7_segment& (0+255),c
  3592  001AA8  0E7D               	movlw	125
  3593  001AAA                     u2067:
  3594  001AAA  2EE8               	decfsz	wreg,f,c
  3595  001AAC  D7FE               	bra	u2067
  3596  001AAE  2E21               	decfsz	??_display_7_segment& (0+255),f,c
  3597  001AB0  D7FC               	bra	u2067
  3598  001AB2  F000               	nop	
  3599                           
  3600                           ;the3.c: 184: LATH0 = 0;
  3601  001AB4  9090               	bcf	3984,0,c	;volatile
  3602  001AB6  0012               	return	
  3603  001AB8                     __end_of_display_7_segment:
  3604                           	opt stack 0
  3605                           tblptru	equ	0xFF8
  3606                           tblptrh	equ	0xFF7
  3607                           tblptrl	equ	0xFF6
  3608                           tablat	equ	0xFF5
  3609                           intcon	equ	0xFF2
  3610                           intcon2	equ	0xFF1
  3611                           postinc0	equ	0xFEE
  3612                           wreg	equ	0xFE8
  3613                           postinc1	equ	0xFE6
  3614                           postdec1	equ	0xFE5
  3615                           plusw1	equ	0xFE3
  3616                           fsr1h	equ	0xFE2
  3617                           fsr1l	equ	0xFE1
  3618                           indf2	equ	0xFDF
  3619                           postinc2	equ	0xFDE
  3620                           postdec2	equ	0xFDD
  3621                           plusw2	equ	0xFDB
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function _ClearLCDScreen *****************
  3627 ;; Defined at:
  3628 ;;		line 121 in file "LCD.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;		None
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;Total ram usage:        1 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    4
  3649 ;; This function calls:
  3650 ;;		_WriteCommandToLCD
  3651 ;; This function is called by:
  3652 ;;		_RE1button
  3653 ;;		_show_password
  3654 ;;		_main
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text20
  3659  001FC8                     __ptext20:
  3660                           	opt stack 0
  3661  001FC8                     _ClearLCDScreen:
  3662                           	opt stack 25
  3663                           
  3664                           ;LCD.c: 123: WriteCommandToLCD(0x01);
  3665                           
  3666                           ;incstack = 0
  3667  001FC8  0E01               	movlw	1
  3668  001FCA  EC74  F00F         	call	_WriteCommandToLCD
  3669                           
  3670                           ;LCD.c: 124: _delay((unsigned long)((2)*(40000000/4000.0)));
  3671  001FCE  0E1A               	movlw	26
  3672  001FD0  6E1A               	movwf	??_ClearLCDScreen& (0+255),c
  3673  001FD2  0EF8               	movlw	248
  3674  001FD4                     u2077:
  3675  001FD4  2EE8               	decfsz	wreg,f,c
  3676  001FD6  D7FE               	bra	u2077
  3677  001FD8  2E1A               	decfsz	??_ClearLCDScreen& (0+255),f,c
  3678  001FDA  D7FC               	bra	u2077
  3679  001FDC  D000               	nop2	
  3680  001FDE  0012               	return		;funcret
  3681  001FE0                     __end_of_ClearLCDScreen:
  3682                           	opt stack 0
  3683                           tblptru	equ	0xFF8
  3684                           tblptrh	equ	0xFF7
  3685                           tblptrl	equ	0xFF6
  3686                           tablat	equ	0xFF5
  3687                           intcon	equ	0xFF2
  3688                           intcon2	equ	0xFF1
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           postinc1	equ	0xFE6
  3692                           postdec1	equ	0xFE5
  3693                           plusw1	equ	0xFE3
  3694                           fsr1h	equ	0xFE2
  3695                           fsr1l	equ	0xFE1
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           postdec2	equ	0xFDD
  3699                           plusw2	equ	0xFDB
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704 ;; *************** function _InitLCD *****************
  3705 ;; Defined at:
  3706 ;;		line 43 in file "LCD.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;		None
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;		None
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  1    wreg      void 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2, status,0, cstack
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;Total ram usage:        1 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    4
  3727 ;; This function calls:
  3728 ;;		_ToggleEpinOfLCD
  3729 ;;		_WriteCommandToLCD
  3730 ;; This function is called by:
  3731 ;;		_main
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text21
  3736  001900                     __ptext21:
  3737                           	opt stack 0
  3738  001900                     _InitLCD:
  3739                           	opt stack 26
  3740                           
  3741                           ;LCD.c: 46: TRISA = 0;
  3742                           
  3743                           ;incstack = 0
  3744  001900  0E00               	movlw	0
  3745  001902  6E92               	movwf	3986,c	;volatile
  3746                           
  3747                           ;LCD.c: 47: TRISC = 0;
  3748  001904  0E00               	movlw	0
  3749  001906  6E94               	movwf	3988,c	;volatile
  3750                           
  3751                           ;LCD.c: 48: TRISE = 0;
  3752  001908  0E00               	movlw	0
  3753  00190A  6E96               	movwf	3990,c	;volatile
  3754                           
  3755                           ;LCD.c: 49: TRISF = 0;
  3756  00190C  0E00               	movlw	0
  3757  00190E  6E97               	movwf	3991,c	;volatile
  3758                           
  3759                           ;LCD.c: 50: TRISG = 0;
  3760  001910  0E00               	movlw	0
  3761  001912  6E98               	movwf	3992,c	;volatile
  3762                           
  3763                           ;LCD.c: 52: TRISH = 0;
  3764  001914  0E00               	movlw	0
  3765  001916  6E99               	movwf	3993,c	;volatile
  3766                           
  3767                           ;LCD.c: 53: TRISJ = 0;
  3768  001918  0E00               	movlw	0
  3769  00191A  6E9A               	movwf	3994,c	;volatile
  3770                           
  3771                           ;LCD.c: 55: PORTA = 0;
  3772  00191C  0E00               	movlw	0
  3773  00191E  6E80               	movwf	3968,c	;volatile
  3774                           
  3775                           ;LCD.c: 56: PORTC = 0;
  3776  001920  0E00               	movlw	0
  3777  001922  6E82               	movwf	3970,c	;volatile
  3778                           
  3779                           ;LCD.c: 57: PORTE = 0;
  3780  001924  0E00               	movlw	0
  3781  001926  6E84               	movwf	3972,c	;volatile
  3782                           
  3783                           ;LCD.c: 58: PORTF = 0;
  3784  001928  0E00               	movlw	0
  3785  00192A  6E85               	movwf	3973,c	;volatile
  3786                           
  3787                           ;LCD.c: 59: PORTG = 0;
  3788  00192C  0E00               	movlw	0
  3789  00192E  6E86               	movwf	3974,c	;volatile
  3790                           
  3791                           ;LCD.c: 61: PORTH = 0;
  3792  001930  0E00               	movlw	0
  3793  001932  6E87               	movwf	3975,c	;volatile
  3794                           
  3795                           ;LCD.c: 62: PORTJ = 0;
  3796  001934  0E00               	movlw	0
  3797  001936  6E88               	movwf	3976,c	;volatile
  3798                           
  3799                           ;LCD.c: 65: LATB5 = 0;
  3800  001938  9A8A               	bcf	3978,5,c	;volatile
  3801                           
  3802                           ;LCD.c: 66: LATB2 = 0;
  3803  00193A  948A               	bcf	3978,2,c	;volatile
  3804                           
  3805                           ;LCD.c: 67: LATD4 = 0;
  3806  00193C  988C               	bcf	3980,4,c	;volatile
  3807                           
  3808                           ;LCD.c: 68: LATD5 = 0;
  3809  00193E  9A8C               	bcf	3980,5,c	;volatile
  3810                           
  3811                           ;LCD.c: 69: LATD6 = 0;
  3812  001940  9C8C               	bcf	3980,6,c	;volatile
  3813                           
  3814                           ;LCD.c: 70: LATD7 = 0;
  3815  001942  9E8C               	bcf	3980,7,c	;volatile
  3816                           
  3817                           ;LCD.c: 71: TRISB5 = 0;
  3818  001944  9A93               	bcf	3987,5,c	;volatile
  3819                           
  3820                           ;LCD.c: 72: TRISB2 = 0;
  3821  001946  9493               	bcf	3987,2,c	;volatile
  3822                           
  3823                           ;LCD.c: 73: TRISD4 = 0;
  3824  001948  9895               	bcf	3989,4,c	;volatile
  3825                           
  3826                           ;LCD.c: 74: TRISD5 = 0;
  3827  00194A  9A95               	bcf	3989,5,c	;volatile
  3828                           
  3829                           ;LCD.c: 75: TRISD6 = 0;
  3830  00194C  9C95               	bcf	3989,6,c	;volatile
  3831                           
  3832                           ;LCD.c: 76: TRISD7 = 0;
  3833  00194E  9E95               	bcf	3989,7,c	;volatile
  3834                           
  3835                           ;LCD.c: 77: LATB5 = 0;
  3836  001950  9A8A               	bcf	3978,5,c	;volatile
  3837                           
  3838                           ;LCD.c: 78: LATB2 = 0;
  3839  001952  948A               	bcf	3978,2,c	;volatile
  3840                           
  3841                           ;LCD.c: 81: _delay((unsigned long)((15)*(40000000/4000.0)));
  3842  001954  0EC3               	movlw	195
  3843  001956  6E1A               	movwf	??_InitLCD& (0+255),c
  3844  001958  0ECD               	movlw	205
  3845  00195A                     u2087:
  3846  00195A  2EE8               	decfsz	wreg,f,c
  3847  00195C  D7FE               	bra	u2087
  3848  00195E  2E1A               	decfsz	??_InitLCD& (0+255),f,c
  3849  001960  D7FC               	bra	u2087
  3850  001962  F000               	nop	
  3851                           
  3852                           ;LCD.c: 82: _delay((unsigned long)((15)*(40000000/4000.0)));
  3853  001964  0EC3               	movlw	195
  3854  001966  6E1A               	movwf	??_InitLCD& (0+255),c
  3855  001968  0ECD               	movlw	205
  3856  00196A                     u2097:
  3857  00196A  2EE8               	decfsz	wreg,f,c
  3858  00196C  D7FE               	bra	u2097
  3859  00196E  2E1A               	decfsz	??_InitLCD& (0+255),f,c
  3860  001970  D7FC               	bra	u2097
  3861  001972  F000               	nop	
  3862                           
  3863                           ;LCD.c: 84: PORTD &= 0x0F;
  3864  001974  0E0F               	movlw	15
  3865  001976  1683               	andwf	3971,f,c	;volatile
  3866                           
  3867                           ;LCD.c: 85: PORTD |= 0x30;
  3868  001978  0E30               	movlw	48
  3869  00197A  1283               	iorwf	3971,f,c	;volatile
  3870                           
  3871                           ;LCD.c: 86: ToggleEpinOfLCD();
  3872  00197C  ECF0  F00F         	call	_ToggleEpinOfLCD	;wreg free
  3873                           
  3874                           ;LCD.c: 88: _delay((unsigned long)((6)*(40000000/4000.0)));
  3875  001980  0E4E               	movlw	78
  3876  001982  6E1A               	movwf	??_InitLCD& (0+255),c
  3877  001984  0EEB               	movlw	235
  3878  001986                     u2107:
  3879  001986  2EE8               	decfsz	wreg,f,c
  3880  001988  D7FE               	bra	u2107
  3881  00198A  2E1A               	decfsz	??_InitLCD& (0+255),f,c
  3882  00198C  D7FC               	bra	u2107
  3883  00198E  F000               	nop	
  3884                           
  3885                           ;LCD.c: 90: PORTD &= 0x0F;
  3886  001990  0E0F               	movlw	15
  3887  001992  1683               	andwf	3971,f,c	;volatile
  3888                           
  3889                           ;LCD.c: 91: PORTD |= 0x30;
  3890  001994  0E30               	movlw	48
  3891  001996  1283               	iorwf	3971,f,c	;volatile
  3892                           
  3893                           ;LCD.c: 92: ToggleEpinOfLCD();
  3894  001998  ECF0  F00F         	call	_ToggleEpinOfLCD	;wreg free
  3895                           
  3896                           ;LCD.c: 94: _delay((unsigned long)((300)*(40000000/4000000.0)));
  3897  00199C  0E04               	movlw	4
  3898  00199E  6E1A               	movwf	??_InitLCD& (0+255),c
  3899  0019A0  0EE4               	movlw	228
  3900  0019A2                     u2117:
  3901  0019A2  2EE8               	decfsz	wreg,f,c
  3902  0019A4  D7FE               	bra	u2117
  3903  0019A6  2E1A               	decfsz	??_InitLCD& (0+255),f,c
  3904  0019A8  D7FC               	bra	u2117
  3905  0019AA  D000               	nop2	
  3906                           
  3907                           ;LCD.c: 96: PORTD &= 0x0F;
  3908  0019AC  0E0F               	movlw	15
  3909  0019AE  1683               	andwf	3971,f,c	;volatile
  3910                           
  3911                           ;LCD.c: 97: PORTD |= 0x30;
  3912  0019B0  0E30               	movlw	48
  3913  0019B2  1283               	iorwf	3971,f,c	;volatile
  3914                           
  3915                           ;LCD.c: 98: ToggleEpinOfLCD();
  3916  0019B4  ECF0  F00F         	call	_ToggleEpinOfLCD	;wreg free
  3917                           
  3918                           ;LCD.c: 100: _delay((unsigned long)((2)*(40000000/4000.0)));
  3919  0019B8  0E1A               	movlw	26
  3920  0019BA  6E1A               	movwf	??_InitLCD& (0+255),c
  3921  0019BC  0EF8               	movlw	248
  3922  0019BE                     u2127:
  3923  0019BE  2EE8               	decfsz	wreg,f,c
  3924  0019C0  D7FE               	bra	u2127
  3925  0019C2  2E1A               	decfsz	??_InitLCD& (0+255),f,c
  3926  0019C4  D7FC               	bra	u2127
  3927  0019C6  D000               	nop2	
  3928                           
  3929                           ;LCD.c: 102: PORTD &= 0x0F;
  3930  0019C8  0E0F               	movlw	15
  3931  0019CA  1683               	andwf	3971,f,c	;volatile
  3932                           
  3933                           ;LCD.c: 103: PORTD |= 0x20;
  3934  0019CC  8A83               	bsf	3971,5,c	;volatile
  3935                           
  3936                           ;LCD.c: 104: ToggleEpinOfLCD();
  3937  0019CE  ECF0  F00F         	call	_ToggleEpinOfLCD	;wreg free
  3938                           
  3939                           ;LCD.c: 106: _delay((unsigned long)((2)*(40000000/4000.0)));
  3940  0019D2  0E1A               	movlw	26
  3941  0019D4  6E1A               	movwf	??_InitLCD& (0+255),c
  3942  0019D6  0EF8               	movlw	248
  3943  0019D8                     u2137:
  3944  0019D8  2EE8               	decfsz	wreg,f,c
  3945  0019DA  D7FE               	bra	u2137
  3946  0019DC  2E1A               	decfsz	??_InitLCD& (0+255),f,c
  3947  0019DE  D7FC               	bra	u2137
  3948  0019E0  D000               	nop2	
  3949                           
  3950                           ;LCD.c: 108: WriteCommandToLCD(0x2C);
  3951  0019E2  0E2C               	movlw	44
  3952  0019E4  EC74  F00F         	call	_WriteCommandToLCD
  3953                           
  3954                           ;LCD.c: 109: WriteCommandToLCD(0x0C);
  3955  0019E8  0E0C               	movlw	12
  3956  0019EA  EC74  F00F         	call	_WriteCommandToLCD
  3957                           
  3958                           ;LCD.c: 110: WriteCommandToLCD(0x01);
  3959  0019EE  0E01               	movlw	1
  3960  0019F0  EC74  F00F         	call	_WriteCommandToLCD
  3961  0019F4  0012               	return		;funcret
  3962  0019F6                     __end_of_InitLCD:
  3963                           	opt stack 0
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           intcon	equ	0xFF2
  3969                           intcon2	equ	0xFF1
  3970                           postinc0	equ	0xFEE
  3971                           wreg	equ	0xFE8
  3972                           postinc1	equ	0xFE6
  3973                           postdec1	equ	0xFE5
  3974                           plusw1	equ	0xFE3
  3975                           fsr1h	equ	0xFE2
  3976                           fsr1l	equ	0xFE1
  3977                           indf2	equ	0xFDF
  3978                           postinc2	equ	0xFDE
  3979                           postdec2	equ	0xFDD
  3980                           plusw2	equ	0xFDB
  3981                           fsr2h	equ	0xFDA
  3982                           fsr2l	equ	0xFD9
  3983                           status	equ	0xFD8
  3984                           
  3985 ;; *************** function _WriteCommandToLCD *****************
  3986 ;; Defined at:
  3987 ;;		line 14 in file "LCD.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  Command         1    wreg     unsigned char 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  Command         1   24[COMRAM] unsigned char 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;Total ram usage:        1 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    3
  4008 ;; This function calls:
  4009 ;;		_ToggleEpinOfLCD
  4010 ;; This function is called by:
  4011 ;;		_InitLCD
  4012 ;;		_ClearLCDScreen
  4013 ;;		_first_message
  4014 ;;		_set_a_pin_message
  4015 ;;		_show_password
  4016 ;;		_enter_pin
  4017 ;;		_endLCD
  4018 ;;		_write_wait_20sec
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           	psect	text22
  4023  001EE8                     __ptext22:
  4024                           	opt stack 0
  4025  001EE8                     _WriteCommandToLCD:
  4026                           	opt stack 26
  4027                           
  4028                           ;incstack = 0
  4029                           ;WriteCommandToLCD@Command stored from wreg
  4030  001EE8  6E19               	movwf	WriteCommandToLCD@Command,c
  4031                           
  4032                           ;LCD.c: 16: LATB2 = 0;
  4033  001EEA  948A               	bcf	3978,2,c	;volatile
  4034                           
  4035                           ;LCD.c: 18: PORTD = PORTD & 0x0F;
  4036  001EEC  5083               	movf	3971,w,c	;volatile
  4037  001EEE  0B0F               	andlw	15
  4038  001EF0  6E83               	movwf	3971,c	;volatile
  4039                           
  4040                           ;LCD.c: 19: PORTD = PORTD |(Command&0xF0);
  4041  001EF2  5019               	movf	WriteCommandToLCD@Command,w,c
  4042  001EF4  0BF0               	andlw	240
  4043  001EF6  1083               	iorwf	3971,w,c	;volatile
  4044  001EF8  6E83               	movwf	3971,c	;volatile
  4045                           
  4046                           ;LCD.c: 20: ToggleEpinOfLCD();
  4047  001EFA  ECF0  F00F         	call	_ToggleEpinOfLCD	;wreg free
  4048                           
  4049                           ;LCD.c: 22: PORTD = PORTD & 0x0F;
  4050  001EFE  5083               	movf	3971,w,c	;volatile
  4051  001F00  0B0F               	andlw	15
  4052  001F02  6E83               	movwf	3971,c	;volatile
  4053                           
  4054                           ;LCD.c: 23: PORTD = PORTD | ((Command<<4)&0xF0);
  4055  001F04  3819               	swapf	WriteCommandToLCD@Command,w,c
  4056  001F06  0BF0               	andlw	240
  4057  001F08  0BF0               	andlw	240
  4058  001F0A  1083               	iorwf	3971,w,c	;volatile
  4059  001F0C  6E83               	movwf	3971,c	;volatile
  4060                           
  4061                           ;LCD.c: 25: ToggleEpinOfLCD();
  4062  001F0E  ECF0  F00F         	call	_ToggleEpinOfLCD	;wreg free
  4063  001F12  0012               	return		;funcret
  4064  001F14                     __end_of_WriteCommandToLCD:
  4065                           	opt stack 0
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           intcon	equ	0xFF2
  4071                           intcon2	equ	0xFF1
  4072                           postinc0	equ	0xFEE
  4073                           wreg	equ	0xFE8
  4074                           postinc1	equ	0xFE6
  4075                           postdec1	equ	0xFE5
  4076                           plusw1	equ	0xFE3
  4077                           fsr1h	equ	0xFE2
  4078                           fsr1l	equ	0xFE1
  4079                           indf2	equ	0xFDF
  4080                           postinc2	equ	0xFDE
  4081                           postdec2	equ	0xFDD
  4082                           plusw2	equ	0xFDB
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8
  4086                           
  4087 ;; *************** function _ToggleEpinOfLCD *****************
  4088 ;; Defined at:
  4089 ;;		line 6 in file "LCD.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;Total ram usage:        0 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    2
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_WriteCommandToLCD
  4114 ;;		_WriteDataToLCD
  4115 ;;		_InitLCD
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text23
  4120  001FE0                     __ptext23:
  4121                           	opt stack 0
  4122  001FE0                     _ToggleEpinOfLCD:
  4123                           	opt stack 25
  4124                           
  4125                           ;LCD.c: 8: LATB5 = 1;
  4126                           
  4127                           ;incstack = 0
  4128  001FE0  8A8A               	bsf	3978,5,c	;volatile
  4129                           
  4130                           ;LCD.c: 9: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4131  001FE2  0EC8               	movlw	200
  4132  001FE4                     u2147:
  4133  001FE4  D000               	nop2	
  4134  001FE6  2EE8               	decfsz	wreg,f,c
  4135  001FE8  D7FD               	bra	u2147
  4136                           
  4137                           ;LCD.c: 10: LATB5 = 0;
  4138  001FEA  9A8A               	bcf	3978,5,c	;volatile
  4139                           
  4140                           ;LCD.c: 11: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4141  001FEC  0EC8               	movlw	200
  4142  001FEE                     u2157:
  4143  001FEE  D000               	nop2	
  4144  001FF0  2EE8               	decfsz	wreg,f,c
  4145  001FF2  D7FD               	bra	u2157
  4146  001FF4  0012               	return		;funcret
  4147  001FF6                     __end_of_ToggleEpinOfLCD:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           intcon	equ	0xFF2
  4154                           intcon2	equ	0xFF1
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           postinc1	equ	0xFE6
  4158                           postdec1	equ	0xFE5
  4159                           plusw1	equ	0xFE3
  4160                           fsr1h	equ	0xFE2
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           plusw2	equ	0xFDB
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _isr *****************
  4171 ;; Defined at:
  4172 ;;		line 339 in file "the3.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  i               2   22[COMRAM] unsigned int 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;Total ram usage:       22 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    1
  4193 ;; This function calls:
  4194 ;;		_val_inPot_2Int
  4195 ;; This function is called by:
  4196 ;;		Interrupt level 2
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	intcode
  4201  000008                     __pintcode:
  4202                           	opt stack 0
  4203  000008                     _isr:
  4204                           	opt stack 25
  4205                           
  4206                           ;incstack = 0
  4207  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4208  00000A  ED5E  F008         	call	int_func,f	;refresh shadow registers
  4209                           tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           intcon	equ	0xFF2
  4214                           intcon2	equ	0xFF1
  4215                           postinc0	equ	0xFEE
  4216                           wreg	equ	0xFE8
  4217                           postinc1	equ	0xFE6
  4218                           postdec1	equ	0xFE5
  4219                           plusw1	equ	0xFE3
  4220                           fsr1h	equ	0xFE2
  4221                           fsr1l	equ	0xFE1
  4222                           indf2	equ	0xFDF
  4223                           postinc2	equ	0xFDE
  4224                           postdec2	equ	0xFDD
  4225                           plusw2	equ	0xFDB
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230                           	psect	intcode_body
  4231  0010BC                     __pintcode_body:
  4232                           	opt stack 25
  4233  0010BC                     int_func:
  4234                           	opt stack 25
  4235  0010BC  0006               	pop		; remove dummy address from shadow register refresh
  4236  0010BE  CFFA F005          	movff	pclath,??_isr+2
  4237  0010C2  CFFB F006          	movff	pclatu,??_isr+3
  4238  0010C6  CFE9 F007          	movff	fsr0l,??_isr+4
  4239  0010CA  CFEA F008          	movff	fsr0h,??_isr+5
  4240  0010CE  CFE1 F009          	movff	fsr1l,??_isr+6
  4241  0010D2  CFE2 F00A          	movff	fsr1h,??_isr+7
  4242  0010D6  CFD9 F00B          	movff	fsr2l,??_isr+8
  4243  0010DA  CFDA F00C          	movff	fsr2h,??_isr+9
  4244  0010DE  CFF3 F00D          	movff	prodl,??_isr+10
  4245  0010E2  CFF4 F00E          	movff	prodh,??_isr+11
  4246  0010E6  CFF6 F00F          	movff	tblptrl,??_isr+12
  4247  0010EA  CFF7 F010          	movff	tblptrh,??_isr+13
  4248  0010EE  CFF8 F011          	movff	tblptru,??_isr+14
  4249  0010F2  CFF5 F012          	movff	tablat,??_isr+15
  4250  0010F6  C042  F013         	movff	btemp,??_isr+16
  4251  0010FA  C043  F014         	movff	btemp+1,??_isr+17
  4252  0010FE  C044  F015         	movff	btemp+2,??_isr+18
  4253  001102  C045  F016         	movff	btemp+3,??_isr+19
  4254                           
  4255                           ;the3.c: 342: if(RBIE && RBIF)
  4256  001106  B6F2               	btfsc	intcon,3,c	;volatile
  4257  001108  A0F2               	btfss	intcon,0,c	;volatile
  4258  00110A  D00B               	goto	i2l301
  4259                           
  4260                           ;the3.c: 343: {
  4261                           ;the3.c: 344: if(PORTBbits.RB6 == 0)
  4262  00110C  AC81               	btfss	3969,6,c	;volatile
  4263                           
  4264                           ;the3.c: 345: {
  4265                           ;the3.c: 346: b6_pressed = 1;
  4266  00110E  8841               	bsf	_b6_pressed/(0+8),_b6_pressed& (0+7),c
  4267                           
  4268                           ;the3.c: 347: }
  4269                           ;the3.c: 348: if(PORTBbits.RB7 == 0)
  4270  001110  BE81               	btfsc	3969,7,c	;volatile
  4271  001112  D005               	goto	i2l304
  4272                           
  4273                           ;the3.c: 349: {
  4274                           ;the3.c: 350: if(counter_to_read_val == 3)
  4275  001114  0E03               	movlw	3
  4276  001116  183F               	xorwf	_counter_to_read_val,w,c
  4277  001118  1040               	iorwf	_counter_to_read_val+1,w,c
  4278  00111A  B4D8               	btfsc	status,2,c
  4279                           
  4280                           ;the3.c: 351: {
  4281                           ;the3.c: 352: pin_full = 1;
  4282  00111C  8A41               	bsf	_pin_full/(0+8),_pin_full& (0+7),c
  4283  00111E                     i2l304:
  4284                           
  4285                           ;the3.c: 353: }
  4286                           ;the3.c: 354: }
  4287                           ;the3.c: 355: RBIF = 0;
  4288  00111E  90F2               	bcf	intcon,0,c	;volatile
  4289                           
  4290                           ;the3.c: 356: return;
  4291  001120  D114               	goto	i2l330
  4292  001122                     i2l301:
  4293                           
  4294                           ;the3.c: 357: }
  4295                           ;the3.c: 358: if(TMR0IE && TMR0IF)
  4296  001122  BAF2               	btfsc	intcon,5,c	;volatile
  4297  001124  A4F2               	btfss	intcon,2,c	;volatile
  4298  001126  D079               	goto	i2l306
  4299                           
  4300                           ;the3.c: 359: {
  4301                           ;the3.c: 360: TMR0IF = 0;
  4302  001128  94F2               	bcf	intcon,2,c	;volatile
  4303                           
  4304                           ;the3.c: 361: if( --blink_timer == 0)
  4305  00112A  063D               	decf	_blink_timer,f,c
  4306  00112C  A0D8               	btfss	status,0,c
  4307  00112E  063E               	decf	_blink_timer+1,f,c
  4308  001130  503D               	movf	_blink_timer,w,c
  4309  001132  103E               	iorwf	_blink_timer+1,w,c
  4310  001134  A4D8               	btfss	status,2,c
  4311  001136  D01F               	goto	i2l307
  4312                           
  4313                           ;the3.c: 362: {
  4314                           ;the3.c: 363: if(blank_val[counter_to_read_val] == '#')
  4315  001138  0E27               	movlw	low _blank_val
  4316  00113A  243F               	addwf	_counter_to_read_val,w,c
  4317  00113C  6ED9               	movwf	fsr2l,c
  4318  00113E  0E00               	movlw	high _blank_val
  4319  001140  2040               	addwfc	_counter_to_read_val+1,w,c
  4320  001142  6EDA               	movwf	fsr2h,c
  4321  001144  0E23               	movlw	35
  4322  001146  18DE               	xorwf	postinc2,w,c
  4323  001148  A4D8               	btfss	status,2,c
  4324  00114A  D008               	goto	i2l308
  4325                           
  4326                           ;the3.c: 364: {
  4327                           ;the3.c: 365: blank_val[counter_to_read_val] = ' ';
  4328  00114C  0E27               	movlw	low _blank_val
  4329  00114E  243F               	addwf	_counter_to_read_val,w,c
  4330  001150  6ED9               	movwf	fsr2l,c
  4331  001152  0E00               	movlw	high _blank_val
  4332  001154  2040               	addwfc	_counter_to_read_val+1,w,c
  4333  001156  6EDA               	movwf	fsr2h,c
  4334  001158  0E20               	movlw	32
  4335  00115A  D007               	goto	L2
  4336  00115C                     i2l308:
  4337                           
  4338                           ;the3.c: 367: else
  4339                           ;the3.c: 368: {
  4340                           ;the3.c: 369: blank_val[counter_to_read_val] = '#';
  4341  00115C  0E27               	movlw	low _blank_val
  4342  00115E  243F               	addwf	_counter_to_read_val,w,c
  4343  001160  6ED9               	movwf	fsr2l,c
  4344  001162  0E00               	movlw	high _blank_val
  4345  001164  2040               	addwfc	_counter_to_read_val+1,w,c
  4346  001166  6EDA               	movwf	fsr2h,c
  4347  001168  0E23               	movlw	35
  4348  00116A                     L2:
  4349  00116A  6EDF               	movwf	indf2,c
  4350                           
  4351                           ;the3.c: 370: }
  4352                           ;the3.c: 371: blink_timer = 625;;
  4353  00116C  0E02               	movlw	2
  4354  00116E  6E3E               	movwf	_blink_timer+1,c
  4355  001170  0E71               	movlw	113
  4356  001172  6E3D               	movwf	_blink_timer,c
  4357                           
  4358                           ;the3.c: 372: toggle = 1;
  4359  001174  8241               	bsf	_toggle/(0+8),_toggle& (0+7),c
  4360  001176                     i2l307:
  4361                           
  4362                           ;the3.c: 373: }
  4363                           ;the3.c: 374: if(--ADC_timer==0)
  4364  001176  063B               	decf	_ADC_timer,f,c
  4365  001178  A0D8               	btfss	status,0,c
  4366  00117A  063C               	decf	_ADC_timer+1,f,c
  4367  00117C  503B               	movf	_ADC_timer,w,c
  4368  00117E  103C               	iorwf	_ADC_timer+1,w,c
  4369  001180  A4D8               	btfss	status,2,c
  4370  001182  D005               	goto	i2l310
  4371                           
  4372                           ;the3.c: 375: {
  4373                           ;the3.c: 376: ADCON0bits.GO_DONE=1;
  4374  001184  82C2               	bsf	4034,1,c	;volatile
  4375                           
  4376                           ;the3.c: 377: ADC_timer=250;;
  4377  001186  0E00               	movlw	0
  4378  001188  6E3C               	movwf	_ADC_timer+1,c
  4379  00118A  0EFA               	movlw	250
  4380  00118C  6E3B               	movwf	_ADC_timer,c
  4381  00118E                     i2l310:
  4382                           
  4383                           ;the3.c: 378: }
  4384                           ;the3.c: 379: if(pin_full == 1 && --sh_pass_timer==0)
  4385  00118E  AA41               	btfss	_pin_full/(0+8),_pin_full& (0+7),c
  4386  001190  D03F               	goto	i2l315
  4387  001192  0100               	movlb	0	; () banked
  4388  001194  079C               	decf	_sh_pass_timer& (0+255),f,b
  4389  001196  A0D8               	btfss	status,0,c
  4390  001198  079D               	decf	(_sh_pass_timer+1)& (0+255),f,b
  4391  00119A  519C               	movf	_sh_pass_timer& (0+255),w,b
  4392  00119C  119D               	iorwf	(_sh_pass_timer+1)& (0+255),w,b
  4393  00119E  A4D8               	btfss	status,2,c
  4394  0011A0  D037               	goto	i2l315
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;the3.c: 380: {
  4398                           ;the3.c: 381: if(sh_pass_count<5)
  4399  0011A2  BF9B               	btfsc	(_sh_pass_count+1)& (0+255),7,b
  4400  0011A4  D006               	goto	i2u134_40
  4401  0011A6  519B               	movf	(_sh_pass_count+1)& (0+255),w,b
  4402  0011A8  E111               	bnz	i2l2349
  4403  0011AA  0E05               	movlw	5
  4404  0011AC  5D9A               	subwf	_sh_pass_count& (0+255),w,b
  4405  0011AE  B0D8               	btfsc	status,0,c
  4406  0011B0  D00D               	goto	i2l312
  4407  0011B2                     i2u134_40:
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;the3.c: 382: {
  4411                           ;the3.c: 383: if(isBlank == 0) isBlank = 1;
  4412  0011B2  B641               	btfsc	_isBlank/(0+8),_isBlank& (0+7),c
  4413  0011B4  D002               	goto	i2l313
  4414                           
  4415                           ; BSR set to: 0
  4416  0011B6  8641               	bsf	_isBlank/(0+8),_isBlank& (0+7),c
  4417  0011B8  D001               	goto	i2l314
  4418  0011BA                     i2l313:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;the3.c: 384: else isBlank = 0;
  4422  0011BA  9641               	bcf	_isBlank/(0+8),_isBlank& (0+7),c
  4423  0011BC                     i2l314:
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;the3.c: 385: sh_pass_timer=1250;;
  4427                           
  4428                           ; BSR set to: 0
  4429  0011BC  0E04               	movlw	4
  4430  0011BE  6F9D               	movwf	(_sh_pass_timer+1)& (0+255),b
  4431  0011C0  0EE2               	movlw	226
  4432  0011C2  6F9C               	movwf	_sh_pass_timer& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;the3.c: 386: sh_pass_count++;
  4436  0011C4  4B9A               	infsnz	_sh_pass_count& (0+255),f,b
  4437  0011C6  2B9B               	incf	(_sh_pass_count+1)& (0+255),f,b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;the3.c: 387: line_toggle =0;
  4441  0011C8  9441               	bcf	_line_toggle/(0+8),_line_toggle& (0+7),c
  4442                           
  4443                           ;the3.c: 388: }
  4444  0011CA  D022               	goto	i2l315
  4445  0011CC                     i2l312:
  4446  0011CC                     i2l2349:
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;the3.c: 389: else
  4450                           ;the3.c: 390: { for(unsigned int i=0;i<4;i++)
  4451  0011CC  0E00               	movlw	0
  4452  0011CE  6E18               	movwf	isr@i+1,c
  4453  0011D0  0E00               	movlw	0
  4454  0011D2  6E17               	movwf	isr@i,c
  4455  0011D4                     i2l2351:
  4456                           
  4457                           ; BSR set to: 0
  4458  0011D4  5018               	movf	isr@i+1,w,c
  4459  0011D6  E10F               	bnz	i2l2361
  4460  0011D8  0E04               	movlw	4
  4461  0011DA  5C17               	subwf	isr@i,w,c
  4462  0011DC  B0D8               	btfsc	status,0,c
  4463  0011DE  D00B               	goto	i2u137_40
  4464                           
  4465                           ;the3.c: 391: blank_val[i]='#';
  4466                           
  4467                           ; BSR set to: 0
  4468                           
  4469                           ; BSR set to: 0
  4470  0011E0  0E27               	movlw	low _blank_val
  4471  0011E2  2417               	addwf	isr@i,w,c
  4472  0011E4  6ED9               	movwf	fsr2l,c
  4473  0011E6  0E00               	movlw	high _blank_val
  4474  0011E8  2018               	addwfc	isr@i+1,w,c
  4475  0011EA  6EDA               	movwf	fsr2h,c
  4476  0011EC  0E23               	movlw	35
  4477  0011EE  6EDF               	movwf	indf2,c
  4478  0011F0  4A17               	infsnz	isr@i,f,c
  4479  0011F2  2A18               	incf	isr@i+1,f,c
  4480  0011F4  D7EF               	goto	i2l2351
  4481  0011F6                     i2u137_40:
  4482  0011F6                     i2l2361:
  4483                           
  4484                           ;the3.c: 392: flag20sec=0;
  4485  0011F6  0E00               	movlw	0
  4486  0011F8  6E2E               	movwf	_flag20sec+1,c
  4487  0011FA  0E00               	movlw	0
  4488  0011FC  6E2D               	movwf	_flag20sec,c
  4489                           
  4490                           ;the3.c: 393: flag120sec=1;
  4491  0011FE  0E00               	movlw	0
  4492  001200  6E30               	movwf	_flag120sec+1,c
  4493  001202  0E01               	movlw	1
  4494  001204  6E2F               	movwf	_flag120sec,c
  4495                           
  4496                           ;the3.c: 394: pin_full =0;
  4497  001206  9A41               	bcf	_pin_full/(0+8),_pin_full& (0+7),c
  4498                           
  4499                           ;the3.c: 395: counter_to_read_val=0;
  4500  001208  0E00               	movlw	0
  4501  00120A  6E40               	movwf	_counter_to_read_val+1,c
  4502  00120C  0E00               	movlw	0
  4503  00120E  6E3F               	movwf	_counter_to_read_val,c
  4504  001210                     i2l315:
  4505                           
  4506                           ;the3.c: 397: }
  4507                           ;the3.c: 398: }
  4508                           ;the3.c: 399: TMR0 = 131;;
  4509  001210  0E00               	movlw	0
  4510  001212  6ED7               	movwf	4055,c	;volatile
  4511  001214  0E83               	movlw	131
  4512  001216  6ED6               	movwf	4054,c	;volatile
  4513                           
  4514                           ;the3.c: 400: return;
  4515  001218  D098               	goto	i2l330
  4516  00121A                     i2l306:
  4517                           
  4518                           ;the3.c: 401: }
  4519                           ;the3.c: 402: if(TMR1IE && TMR1IF )
  4520  00121A  B09D               	btfsc	3997,0,c	;volatile
  4521  00121C  A09E               	btfss	3998,0,c	;volatile
  4522  00121E  D031               	goto	i2l318
  4523                           
  4524                           ;the3.c: 403: {
  4525                           ;the3.c: 404: TMR1IF=0;
  4526  001220  909E               	bcf	3998,0,c	;volatile
  4527                           
  4528                           ;the3.c: 405: if( flag120sec==1 && --timer_1sec==0 )
  4529  001222  042F               	decf	_flag120sec,w,c
  4530  001224  1030               	iorwf	_flag120sec+1,w,c
  4531  001226  A4D8               	btfss	status,2,c
  4532  001228  D027               	goto	i2l319
  4533  00122A  0100               	movlb	0	; () banked
  4534  00122C  0796               	decf	_timer_1sec& (0+255),f,b
  4535  00122E  A0D8               	btfss	status,0,c
  4536  001230  0797               	decf	(_timer_1sec+1)& (0+255),f,b
  4537  001232  5196               	movf	_timer_1sec& (0+255),w,b
  4538  001234  1197               	iorwf	(_timer_1sec+1)& (0+255),w,b
  4539  001236  A4D8               	btfss	status,2,c
  4540  001238  D01F               	goto	i2l319
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;the3.c: 406: {
  4544                           ;the3.c: 407: if(flag120sec==1 ){
  4545  00123A  042F               	decf	_flag120sec,w,c
  4546  00123C  1030               	iorwf	_flag120sec+1,w,c
  4547  00123E  A4D8               	btfss	status,2,c
  4548  001240  D003               	goto	i2l320
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;the3.c: 408: counter_120sec--;
  4552  001242  0631               	decf	_counter_120sec,f,c
  4553  001244  A0D8               	btfss	status,0,c
  4554  001246  0632               	decf	_counter_120sec+1,f,c
  4555  001248                     i2l320:
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;the3.c: 409: }
  4559                           ;the3.c: 410: if(flag20sec==1)
  4560                           
  4561                           ; BSR set to: 0
  4562  001248  042D               	decf	_flag20sec,w,c
  4563  00124A  102E               	iorwf	_flag20sec+1,w,c
  4564  00124C  A4D8               	btfss	status,2,c
  4565  00124E  D010               	goto	i2l322
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;the3.c: 411: {
  4569                           ;the3.c: 412: counter_20sec--;
  4570  001250  0798               	decf	_counter_20sec& (0+255),f,b
  4571  001252  A0D8               	btfss	status,0,c
  4572  001254  0799               	decf	(_counter_20sec+1)& (0+255),f,b
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;the3.c: 413: if(counter_20sec==0)
  4576  001256  5198               	movf	_counter_20sec& (0+255),w,b
  4577  001258  1199               	iorwf	(_counter_20sec+1)& (0+255),w,b
  4578  00125A  A4D8               	btfss	status,2,c
  4579  00125C  D009               	goto	i2l322
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;the3.c: 414: {
  4583                           ;the3.c: 415: counter_20sec=20;
  4584  00125E  0E00               	movlw	0
  4585  001260  6F99               	movwf	(_counter_20sec+1)& (0+255),b
  4586  001262  0E14               	movlw	20
  4587  001264  6F98               	movwf	_counter_20sec& (0+255),b
  4588                           
  4589                           ;the3.c: 416: flag20sec=0;
  4590  001266  0E00               	movlw	0
  4591  001268  6E2E               	movwf	_flag20sec+1,c
  4592  00126A  0E00               	movlw	0
  4593  00126C  6E2D               	movwf	_flag20sec,c
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;the3.c: 417: isEnterPin = 0;
  4597  00126E  9041               	bcf	_isEnterPin/(0+8),_isEnterPin& (0+7),c
  4598  001270                     i2l322:
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;the3.c: 418: }
  4602                           ;the3.c: 420: }
  4603                           ;the3.c: 421: timer_1sec=20;;
  4604                           
  4605                           ; BSR set to: 0
  4606  001270  0E00               	movlw	0
  4607  001272  6F97               	movwf	(_timer_1sec+1)& (0+255),b
  4608  001274  0E14               	movlw	20
  4609  001276  6F96               	movwf	_timer_1sec& (0+255),b
  4610  001278                     i2l319:
  4611                           
  4612                           ;the3.c: 422: }
  4613                           ;the3.c: 423: TMR1=3036;;
  4614  001278  0E0B               	movlw	11
  4615  00127A  6ECF               	movwf	4047,c	;volatile
  4616  00127C  0EDC               	movlw	220
  4617  00127E  6ECE               	movwf	4046,c	;volatile
  4618                           
  4619                           ;the3.c: 424: return;
  4620  001280  D064               	goto	i2l330
  4621  001282                     i2l318:
  4622                           
  4623                           ;the3.c: 425: }
  4624                           ;the3.c: 426: if(ADIE && ADIF )
  4625  001282  BC9D               	btfsc	3997,6,c	;volatile
  4626  001284  AC9E               	btfss	3998,6,c	;volatile
  4627  001286  D061               	goto	i2l330
  4628                           
  4629                           ;the3.c: 427: {
  4630                           ;the3.c: 428: ADIF =0;
  4631  001288  9C9E               	bcf	3998,6,c	;volatile
  4632                           
  4633                           ;the3.c: 429: cur_val_inPot=ADRES;
  4634  00128A  CFC3 F039          	movff	4035,_cur_val_inPot	;volatile
  4635  00128E  CFC4 F03A          	movff	4036,_cur_val_inPot+1	;volatile
  4636                           
  4637                           ;the3.c: 430: diff_val=cur_val_inPot-pre_val_inPot;
  4638  001292  C037  F003         	movff	_pre_val_inPot,??_isr
  4639  001296  C038  F004         	movff	_pre_val_inPot+1,??_isr+1
  4640  00129A  1E03               	comf	??_isr,f,c
  4641  00129C  1E04               	comf	??_isr+1,f,c
  4642  00129E  4A03               	infsnz	??_isr,f,c
  4643  0012A0  2A04               	incf	??_isr+1,f,c
  4644  0012A2  5039               	movf	_cur_val_inPot,w,c
  4645  0012A4  2403               	addwf	??_isr,w,c
  4646  0012A6  0100               	movlb	0	; () banked
  4647  0012A8  6F9E               	movwf	_diff_val& (0+255),b
  4648  0012AA  503A               	movf	_cur_val_inPot+1,w,c
  4649  0012AC  2004               	addwfc	??_isr+1,w,c
  4650  0012AE  6F9F               	movwf	(_diff_val+1)& (0+255),b
  4651                           
  4652                           ;the3.c: 431: diff_val2=pre_val_inPot-cur_val_inPot;
  4653  0012B0  C039  F003         	movff	_cur_val_inPot,??_isr
  4654  0012B4  C03A  F004         	movff	_cur_val_inPot+1,??_isr+1
  4655  0012B8  1E03               	comf	??_isr,f,c
  4656  0012BA  1E04               	comf	??_isr+1,f,c
  4657  0012BC  4A03               	infsnz	??_isr,f,c
  4658  0012BE  2A04               	incf	??_isr+1,f,c
  4659  0012C0  5037               	movf	_pre_val_inPot,w,c
  4660  0012C2  2403               	addwf	??_isr,w,c
  4661  0012C4  6E35               	movwf	_diff_val2,c
  4662  0012C6  5038               	movf	_pre_val_inPot+1,w,c
  4663  0012C8  2004               	addwfc	??_isr+1,w,c
  4664  0012CA  6E36               	movwf	_diff_val2+1,c
  4665                           
  4666                           ;the3.c: 433: if(pre_val_inPot != -1 && ( diff_val>=10 || diff_val2>=10) )
  4667  0012CC  2837               	incf	_pre_val_inPot,w,c
  4668  0012CE  E103               	bnz	i2u147_40
  4669  0012D0  2838               	incf	_pre_val_inPot+1,w,c
  4670  0012D2  B4D8               	btfsc	status,2,c
  4671  0012D4  D036               	goto	i2l329
  4672  0012D6                     i2u147_40:
  4673                           
  4674                           ; BSR set to: 0
  4675  0012D6  BF9F               	btfsc	(_diff_val+1)& (0+255),7,b
  4676  0012D8  D006               	goto	i2u148_40
  4677  0012DA  519F               	movf	(_diff_val+1)& (0+255),w,b
  4678  0012DC  E10C               	bnz	i2l326
  4679  0012DE  0E0A               	movlw	10
  4680  0012E0  5D9E               	subwf	_diff_val& (0+255),w,b
  4681  0012E2  B0D8               	btfsc	status,0,c
  4682  0012E4  D008               	goto	i2u149_40
  4683  0012E6                     i2u148_40:
  4684                           
  4685                           ; BSR set to: 0
  4686  0012E6  BE36               	btfsc	_diff_val2+1,7,c
  4687  0012E8  D02C               	goto	i2l329
  4688  0012EA  5036               	movf	_diff_val2+1,w,c
  4689  0012EC  E104               	bnz	i2u149_40
  4690  0012EE  0E0A               	movlw	10
  4691  0012F0  5C35               	subwf	_diff_val2,w,c
  4692  0012F2  A0D8               	btfss	status,0,c
  4693  0012F4  D026               	goto	i2l329
  4694  0012F6                     i2u149_40:
  4695  0012F6                     i2l326:
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;the3.c: 434: {
  4699                           ;the3.c: 435: val_inPot=cur_val_inPot;
  4700  0012F6  C039  F033         	movff	_cur_val_inPot,_val_inPot
  4701  0012FA  C03A  F034         	movff	_cur_val_inPot+1,_val_inPot+1
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;the3.c: 436: if(flag120sec==0)
  4705  0012FE  502F               	movf	_flag120sec,w,c
  4706  001300  1030               	iorwf	_flag120sec+1,w,c
  4707  001302  A4D8               	btfss	status,2,c
  4708  001304  D00B               	goto	i2l327
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;the3.c: 437: {
  4712                           ;the3.c: 438: password_int[counter_to_read_val]= val_inPot_2Int();
  4713  001306  ECFA  F00B         	call	_val_inPot_2Int	;wreg free
  4714  00130A  90D8               	bcf	status,0,c
  4715  00130C  343F               	rlcf	_counter_to_read_val,w,c
  4716  00130E  6ED9               	movwf	fsr2l,c
  4717  001310  3440               	rlcf	_counter_to_read_val+1,w,c
  4718  001312  6EDA               	movwf	fsr2h,c
  4719  001314  0E8E               	movlw	low _password_int
  4720  001316  26D9               	addwf	fsr2l,f,c
  4721  001318  0E00               	movlw	high _password_int
  4722  00131A  D00E               	goto	L3
  4723  00131C                     i2l327:
  4724                           
  4725                           ;the3.c: 440: else if(flag120sec==1)
  4726  00131C  042F               	decf	_flag120sec,w,c
  4727  00131E  1030               	iorwf	_flag120sec+1,w,c
  4728  001320  A4D8               	btfss	status,2,c
  4729  001322  D00F               	goto	i2l329
  4730                           
  4731                           ;the3.c: 441: {
  4732                           ;the3.c: 442: entered_pass[counter_to_read_val]= val_inPot_2Int();
  4733  001324  ECFA  F00B         	call	_val_inPot_2Int	;wreg free
  4734  001328  90D8               	bcf	status,0,c
  4735  00132A  343F               	rlcf	_counter_to_read_val,w,c
  4736  00132C  6ED9               	movwf	fsr2l,c
  4737  00132E  3440               	rlcf	_counter_to_read_val+1,w,c
  4738  001330  6EDA               	movwf	fsr2h,c
  4739  001332  0E86               	movlw	low _entered_pass
  4740  001334  26D9               	addwf	fsr2l,f,c
  4741  001336  0E00               	movlw	high _entered_pass
  4742  001338                     L3:
  4743  001338  22DA               	addwfc	fsr2h,f,c
  4744  00133A  C001  FFDE         	movff	?_val_inPot_2Int,postinc2
  4745  00133E  C002  FFDD         	movff	?_val_inPot_2Int+1,postdec2
  4746  001342                     i2l329:
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;the3.c: 446: else
  4750                           ;the3.c: 447: {
  4751                           ;the3.c: 448: pre_val_inPot=cur_val_inPot;
  4752                           
  4753                           ;the3.c: 445: }
  4754                           
  4755                           ;the3.c: 443: }
  4756                           ;the3.c: 444: pre_val_inPot=cur_val_inPot;
  4757  001342  C039  F037         	movff	_cur_val_inPot,_pre_val_inPot
  4758  001346  C03A  F038         	movff	_cur_val_inPot+1,_pre_val_inPot+1
  4759  00134A                     i2l330:
  4760                           
  4761                           ; BSR set to: 0
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;the3.c: 449: }
  4765                           ;the3.c: 450: return;
  4766  00134A  C016  F045         	movff	??_isr+19,btemp+3
  4767  00134E  C015  F044         	movff	??_isr+18,btemp+2
  4768  001352  C014  F043         	movff	??_isr+17,btemp+1
  4769  001356  C013  F042         	movff	??_isr+16,btemp
  4770  00135A  C012  FFF5         	movff	??_isr+15,tablat
  4771  00135E  C011  FFF8         	movff	??_isr+14,tblptru
  4772  001362  C010  FFF7         	movff	??_isr+13,tblptrh
  4773  001366  C00F  FFF6         	movff	??_isr+12,tblptrl
  4774  00136A  C00E  FFF4         	movff	??_isr+11,prodh
  4775  00136E  C00D  FFF3         	movff	??_isr+10,prodl
  4776  001372  C00C  FFDA         	movff	??_isr+9,fsr2h
  4777  001376  C00B  FFD9         	movff	??_isr+8,fsr2l
  4778  00137A  C00A  FFE2         	movff	??_isr+7,fsr1h
  4779  00137E  C009  FFE1         	movff	??_isr+6,fsr1l
  4780  001382  C008  FFEA         	movff	??_isr+5,fsr0h
  4781  001386  C007  FFE9         	movff	??_isr+4,fsr0l
  4782  00138A  C006  FFFB         	movff	??_isr+3,pclatu
  4783  00138E  C005  FFFA         	movff	??_isr+2,pclath
  4784  001392  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4785  001394  0011               	retfie		f
  4786  001396                     __end_of_isr:
  4787                           	opt stack 0
  4788                           pclatu	equ	0xFFB
  4789                           pclath	equ	0xFFA
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           intcon2	equ	0xFF1
  4798                           postinc0	equ	0xFEE
  4799                           fsr0h	equ	0xFEA
  4800                           fsr0l	equ	0xFE9
  4801                           wreg	equ	0xFE8
  4802                           postinc1	equ	0xFE6
  4803                           postdec1	equ	0xFE5
  4804                           plusw1	equ	0xFE3
  4805                           fsr1h	equ	0xFE2
  4806                           fsr1l	equ	0xFE1
  4807                           indf2	equ	0xFDF
  4808                           postinc2	equ	0xFDE
  4809                           postdec2	equ	0xFDD
  4810                           plusw2	equ	0xFDB
  4811                           fsr2h	equ	0xFDA
  4812                           fsr2l	equ	0xFD9
  4813                           status	equ	0xFD8
  4814                           
  4815 ;; *************** function _val_inPot_2Int *****************
  4816 ;; Defined at:
  4817 ;;		line 311 in file "the3.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;		None
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;		None
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  2    0[COMRAM] int 
  4824 ;; Registers used:
  4825 ;;		wreg, status,2, status,0
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4831 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;Total ram usage:        2 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_isr
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text25
  4845  0017F4                     __ptext25:
  4846                           	opt stack 0
  4847  0017F4                     _val_inPot_2Int:
  4848                           	opt stack 25
  4849                           
  4850                           ;the3.c: 313: if(val_inPot<100)
  4851                           
  4852                           ;incstack = 0
  4853  0017F4  BE34               	btfsc	_val_inPot+1,7,c
  4854  0017F6  D006               	goto	i2u108_40
  4855  0017F8  5034               	movf	_val_inPot+1,w,c
  4856  0017FA  E109               	bnz	i2l2165
  4857  0017FC  0E64               	movlw	100
  4858  0017FE  5C33               	subwf	_val_inPot,w,c
  4859  001800  B0D8               	btfsc	status,0,c
  4860  001802  D005               	goto	i2l285
  4861  001804                     i2u108_40:
  4862                           
  4863                           ;the3.c: 314: return 0;
  4864  001804  0E00               	movlw	0
  4865  001806  6E02               	movwf	?_val_inPot_2Int+1,c
  4866  001808  0E00               	movlw	0
  4867  00180A  6E01               	movwf	?_val_inPot_2Int,c
  4868  00180C  0012               	return	
  4869  00180E                     i2l285:
  4870  00180E                     i2l2165:
  4871                           
  4872                           ;the3.c: 315: if(val_inPot<200)
  4873  00180E  BE34               	btfsc	_val_inPot+1,7,c
  4874  001810  D006               	goto	i2u109_40
  4875  001812  5034               	movf	_val_inPot+1,w,c
  4876  001814  E109               	bnz	i2l2171
  4877  001816  0EC8               	movlw	200
  4878  001818  5C33               	subwf	_val_inPot,w,c
  4879  00181A  B0D8               	btfsc	status,0,c
  4880  00181C  D005               	goto	i2l287
  4881  00181E                     i2u109_40:
  4882                           
  4883                           ;the3.c: 316: return 1;
  4884  00181E  0E00               	movlw	0
  4885  001820  6E02               	movwf	?_val_inPot_2Int+1,c
  4886  001822  0E01               	movlw	1
  4887  001824  6E01               	movwf	?_val_inPot_2Int,c
  4888  001826  0012               	return	
  4889  001828                     i2l287:
  4890  001828                     i2l2171:
  4891                           
  4892                           ;the3.c: 317: if(val_inPot<300)
  4893  001828  BE34               	btfsc	_val_inPot+1,7,c
  4894  00182A  D006               	goto	i2u110_40
  4895  00182C  0E2C               	movlw	44
  4896  00182E  5C33               	subwf	_val_inPot,w,c
  4897  001830  0E01               	movlw	1
  4898  001832  5834               	subwfb	_val_inPot+1,w,c
  4899  001834  B0D8               	btfsc	status,0,c
  4900  001836  D005               	goto	i2l288
  4901  001838                     i2u110_40:
  4902                           
  4903                           ;the3.c: 318: return 2;
  4904  001838  0E00               	movlw	0
  4905  00183A  6E02               	movwf	?_val_inPot_2Int+1,c
  4906  00183C  0E02               	movlw	2
  4907  00183E  6E01               	movwf	?_val_inPot_2Int,c
  4908  001840  0012               	return	
  4909  001842                     i2l288:
  4910                           
  4911                           ;the3.c: 319: if(val_inPot<400)
  4912  001842  BE34               	btfsc	_val_inPot+1,7,c
  4913  001844  D006               	goto	i2u111_40
  4914  001846  0E90               	movlw	144
  4915  001848  5C33               	subwf	_val_inPot,w,c
  4916  00184A  0E01               	movlw	1
  4917  00184C  5834               	subwfb	_val_inPot+1,w,c
  4918  00184E  B0D8               	btfsc	status,0,c
  4919  001850  D005               	goto	i2l289
  4920  001852                     i2u111_40:
  4921                           
  4922                           ;the3.c: 320: return 3;
  4923  001852  0E00               	movlw	0
  4924  001854  6E02               	movwf	?_val_inPot_2Int+1,c
  4925  001856  0E03               	movlw	3
  4926  001858  6E01               	movwf	?_val_inPot_2Int,c
  4927  00185A  0012               	return	
  4928  00185C                     i2l289:
  4929                           
  4930                           ;the3.c: 321: if(val_inPot<500)
  4931  00185C  BE34               	btfsc	_val_inPot+1,7,c
  4932  00185E  D006               	goto	i2u112_40
  4933  001860  0EF4               	movlw	244
  4934  001862  5C33               	subwf	_val_inPot,w,c
  4935  001864  0E01               	movlw	1
  4936  001866  5834               	subwfb	_val_inPot+1,w,c
  4937  001868  B0D8               	btfsc	status,0,c
  4938  00186A  D005               	goto	i2l290
  4939  00186C                     i2u112_40:
  4940                           
  4941                           ;the3.c: 322: return 4;
  4942  00186C  0E00               	movlw	0
  4943  00186E  6E02               	movwf	?_val_inPot_2Int+1,c
  4944  001870  0E04               	movlw	4
  4945  001872  6E01               	movwf	?_val_inPot_2Int,c
  4946  001874  0012               	return	
  4947  001876                     i2l290:
  4948                           
  4949                           ;the3.c: 323: if(val_inPot<600)
  4950  001876  BE34               	btfsc	_val_inPot+1,7,c
  4951  001878  D006               	goto	i2u113_40
  4952  00187A  0E58               	movlw	88
  4953  00187C  5C33               	subwf	_val_inPot,w,c
  4954  00187E  0E02               	movlw	2
  4955  001880  5834               	subwfb	_val_inPot+1,w,c
  4956  001882  B0D8               	btfsc	status,0,c
  4957  001884  D005               	goto	i2l291
  4958  001886                     i2u113_40:
  4959                           
  4960                           ;the3.c: 324: return 5;
  4961  001886  0E00               	movlw	0
  4962  001888  6E02               	movwf	?_val_inPot_2Int+1,c
  4963  00188A  0E05               	movlw	5
  4964  00188C  6E01               	movwf	?_val_inPot_2Int,c
  4965  00188E  0012               	return	
  4966  001890                     i2l291:
  4967                           
  4968                           ;the3.c: 325: if(val_inPot<700)
  4969  001890  BE34               	btfsc	_val_inPot+1,7,c
  4970  001892  D006               	goto	i2u114_40
  4971  001894  0EBC               	movlw	188
  4972  001896  5C33               	subwf	_val_inPot,w,c
  4973  001898  0E02               	movlw	2
  4974  00189A  5834               	subwfb	_val_inPot+1,w,c
  4975  00189C  B0D8               	btfsc	status,0,c
  4976  00189E  D005               	goto	i2l292
  4977  0018A0                     i2u114_40:
  4978                           
  4979                           ;the3.c: 326: return 6;
  4980  0018A0  0E00               	movlw	0
  4981  0018A2  6E02               	movwf	?_val_inPot_2Int+1,c
  4982  0018A4  0E06               	movlw	6
  4983  0018A6  6E01               	movwf	?_val_inPot_2Int,c
  4984  0018A8  0012               	return	
  4985  0018AA                     i2l292:
  4986                           
  4987                           ;the3.c: 327: if(val_inPot<800)
  4988  0018AA  BE34               	btfsc	_val_inPot+1,7,c
  4989  0018AC  D006               	goto	i2u115_40
  4990  0018AE  0E20               	movlw	32
  4991  0018B0  5C33               	subwf	_val_inPot,w,c
  4992  0018B2  0E03               	movlw	3
  4993  0018B4  5834               	subwfb	_val_inPot+1,w,c
  4994  0018B6  B0D8               	btfsc	status,0,c
  4995  0018B8  D005               	goto	i2l293
  4996  0018BA                     i2u115_40:
  4997                           
  4998                           ;the3.c: 328: return 7;
  4999  0018BA  0E00               	movlw	0
  5000  0018BC  6E02               	movwf	?_val_inPot_2Int+1,c
  5001  0018BE  0E07               	movlw	7
  5002  0018C0  6E01               	movwf	?_val_inPot_2Int,c
  5003  0018C2  0012               	return	
  5004  0018C4                     i2l293:
  5005                           
  5006                           ;the3.c: 329: if(val_inPot<900)
  5007  0018C4  BE34               	btfsc	_val_inPot+1,7,c
  5008  0018C6  D006               	goto	i2u116_40
  5009  0018C8  0E84               	movlw	132
  5010  0018CA  5C33               	subwf	_val_inPot,w,c
  5011  0018CC  0E03               	movlw	3
  5012  0018CE  5834               	subwfb	_val_inPot+1,w,c
  5013  0018D0  B0D8               	btfsc	status,0,c
  5014  0018D2  D005               	goto	i2l294
  5015  0018D4                     i2u116_40:
  5016                           
  5017                           ;the3.c: 330: return 8;
  5018  0018D4  0E00               	movlw	0
  5019  0018D6  6E02               	movwf	?_val_inPot_2Int+1,c
  5020  0018D8  0E08               	movlw	8
  5021  0018DA  6E01               	movwf	?_val_inPot_2Int,c
  5022  0018DC  0012               	return	
  5023  0018DE                     i2l294:
  5024                           
  5025                           ;the3.c: 331: if(val_inPot<1025)
  5026  0018DE  BE34               	btfsc	_val_inPot+1,7,c
  5027  0018E0  D005               	goto	i2u117_40
  5028  0018E2  0433               	decf	_val_inPot,w,c
  5029  0018E4  0E04               	movlw	4
  5030  0018E6  5834               	subwfb	_val_inPot+1,w,c
  5031  0018E8  B0D8               	btfsc	status,0,c
  5032  0018EA  D005               	goto	i2l295
  5033  0018EC                     i2u117_40:
  5034                           
  5035                           ;the3.c: 332: return 9;
  5036  0018EC  0E00               	movlw	0
  5037  0018EE  6E02               	movwf	?_val_inPot_2Int+1,c
  5038  0018F0  0E09               	movlw	9
  5039  0018F2  6E01               	movwf	?_val_inPot_2Int,c
  5040  0018F4  0012               	return	
  5041  0018F6                     i2l295:
  5042                           
  5043                           ;the3.c: 333: else
  5044                           ;the3.c: 334: return 0;
  5045  0018F6  0E00               	movlw	0
  5046  0018F8  6E02               	movwf	?_val_inPot_2Int+1,c
  5047  0018FA  0E00               	movlw	0
  5048  0018FC  6E01               	movwf	?_val_inPot_2Int,c
  5049  0018FE  0012               	return	
  5050  001900                     __end_of_val_inPot_2Int:
  5051                           	opt stack 0
  5052                           pclatu	equ	0xFFB
  5053                           pclath	equ	0xFFA
  5054                           tblptru	equ	0xFF8
  5055                           tblptrh	equ	0xFF7
  5056                           tblptrl	equ	0xFF6
  5057                           tablat	equ	0xFF5
  5058                           prodh	equ	0xFF4
  5059                           prodl	equ	0xFF3
  5060                           intcon	equ	0xFF2
  5061                           intcon2	equ	0xFF1
  5062                           postinc0	equ	0xFEE
  5063                           fsr0h	equ	0xFEA
  5064                           fsr0l	equ	0xFE9
  5065                           wreg	equ	0xFE8
  5066                           postinc1	equ	0xFE6
  5067                           postdec1	equ	0xFE5
  5068                           plusw1	equ	0xFE3
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           indf2	equ	0xFDF
  5072                           postinc2	equ	0xFDE
  5073                           postdec2	equ	0xFDD
  5074                           plusw2	equ	0xFDB
  5075                           fsr2h	equ	0xFDA
  5076                           fsr2l	equ	0xFD9
  5077                           status	equ	0xFD8
  5078                           pclatu	equ	0xFFB
  5079                           pclath	equ	0xFFA
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           intcon	equ	0xFF2
  5087                           intcon2	equ	0xFF1
  5088                           postinc0	equ	0xFEE
  5089                           fsr0h	equ	0xFEA
  5090                           fsr0l	equ	0xFE9
  5091                           wreg	equ	0xFE8
  5092                           postinc1	equ	0xFE6
  5093                           postdec1	equ	0xFE5
  5094                           plusw1	equ	0xFE3
  5095                           fsr1h	equ	0xFE2
  5096                           fsr1l	equ	0xFE1
  5097                           indf2	equ	0xFDF
  5098                           postinc2	equ	0xFDE
  5099                           postdec2	equ	0xFDD
  5100                           plusw2	equ	0xFDB
  5101                           fsr2h	equ	0xFDA
  5102                           fsr2l	equ	0xFD9
  5103                           status	equ	0xFD8
  5104                           
  5105                           	psect	rparam
  5106  0000                     pclatu	equ	0xFFB
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon	equ	0xFF2
  5115                           intcon2	equ	0xFF1
  5116                           postinc0	equ	0xFEE
  5117                           fsr0h	equ	0xFEA
  5118                           fsr0l	equ	0xFE9
  5119                           wreg	equ	0xFE8
  5120                           postinc1	equ	0xFE6
  5121                           postdec1	equ	0xFE5
  5122                           plusw1	equ	0xFE3
  5123                           fsr1h	equ	0xFE2
  5124                           fsr1l	equ	0xFE1
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           plusw2	equ	0xFDB
  5129                           fsr2h	equ	0xFDA
  5130                           fsr2l	equ	0xFD9
  5131                           status	equ	0xFD8
  5132                           
  5133                           	psect	temp
  5134  000042                     btemp:
  5135                           	opt stack 0
  5136  000042                     	ds	1
  5137  0000                     int$flags	set	btemp
  5138  0000                     wtemp6	set	btemp+1
  5139                           pclatu	equ	0xFFB
  5140                           pclath	equ	0xFFA
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           intcon2	equ	0xFF1
  5149                           postinc0	equ	0xFEE
  5150                           fsr0h	equ	0xFEA
  5151                           fsr0l	equ	0xFE9
  5152                           wreg	equ	0xFE8
  5153                           postinc1	equ	0xFE6
  5154                           postdec1	equ	0xFE5
  5155                           plusw1	equ	0xFE3
  5156                           fsr1h	equ	0xFE2
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           plusw2	equ	0xFDB
  5162                           fsr2h	equ	0xFDA
  5163                           fsr2l	equ	0xFD9
  5164                           status	equ	0xFD8


Data Sizes:
    Strings     186
    Constant    0
    Data        24
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      65
    BANK0           160     38      88
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    WriteStringToLCD@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[5]), STR_9(CODE[12]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[12]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_delay_3_sec
    _write_wait_20sec->_WriteStringToLCD
    _show_password->_WriteStringToLCD
    _set_a_pin_message->_WriteStringToLCD
    _set_a_pin_message->_num_to_char
    _first_message->_WriteStringToLCD
    _display120sec_Int->___lwmod
    ___lwmod->___lwdiv
    _endLCD->_WriteStringToLCD
    _WriteStringToLCD->_WriteDataToLCD
    _delay_3_sec->_display_7_segment
    _RE1button->_display_7_segment
    _ClearLCDScreen->_WriteCommandToLCD
    _InitLCD->_WriteCommandToLCD

Critical Paths under _isr in COMRAM

    _isr->_val_inPot_2Int

Critical Paths under _main in BANK0

    _main->_display120sec_Int
    _enter_pin->_display120sec_Int
    _display120sec_Int->_display_7_segment
    _delay_3_sec->_display_7_segment
    _RE1button->_display_7_segment

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   26656
                                             37 COMRAM     1     1      0
                                             32 BANK0      6     6      0
                     _ClearLCDScreen
                            _InitLCD
                          _RE1button
                 _check_correct_pass
                        _delay_3_sec
                  _display120sec_Int
                  _display_7_segment
                             _endLCD
                          _enter_pin
                      _first_message
                               _init
                          _next_char
                         _next_char2
                  _set_a_pin_message
                      _show_password
                   _write_wait_20sec
 ---------------------------------------------------------------------------------
 (1) _write_wait_20sec                                     0     0      0    1197
                  _WriteCommandToLCD
                   _WriteStringToLCD
 ---------------------------------------------------------------------------------
 (1) _show_password                                        0     0      0    1285
                     _ClearLCDScreen
                  _WriteCommandToLCD
                     _WriteDataToLCD
                   _WriteStringToLCD
 ---------------------------------------------------------------------------------
 (1) _set_a_pin_message                                    0     0      0    3131
                  _WriteCommandToLCD
                     _WriteDataToLCD
                   _WriteStringToLCD
                        _num_to_char
 ---------------------------------------------------------------------------------
 (1) _next_char2                                           2     2      0       0
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _next_char                                            2     2      0       0
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 4     4      0     158
                                             24 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _first_message                                        0     0      0    1197
                  _WriteCommandToLCD
                   _WriteStringToLCD
 ---------------------------------------------------------------------------------
 (1) _enter_pin                                            0     0      0    6883
                  _WriteCommandToLCD
                     _WriteDataToLCD
                   _WriteStringToLCD
                  _display120sec_Int
                        _num_to_char
 ---------------------------------------------------------------------------------
 (2) _num_to_char                                          3     0      3    1890
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _display120sec_Int                                    8     8      0    3752
                                             24 BANK0      8     8      0
                            ___lwdiv
                            ___lwmod
                  _display_7_segment
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     592
                                             31 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     601
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _endLCD                                               0     0      0    1197
                  _WriteCommandToLCD
                   _WriteStringToLCD
 ---------------------------------------------------------------------------------
 (2) _WriteStringToLCD                                     2     0      2    1153
                                             25 COMRAM     2     0      2
                     _WriteDataToLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataToLCD                                       1     1      0      44
                                             24 COMRAM     1     1      0
                    _ToggleEpinOfLCD
 ---------------------------------------------------------------------------------
 (1) _delay_3_sec                                          4     4      0    2460
                                             33 COMRAM     4     4      0
                  _display_7_segment
 ---------------------------------------------------------------------------------
 (1) _check_correct_pass                                   8     6      2      90
                                             24 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _RE1button                                            0     0      0    2467
                     _ClearLCDScreen
                  _display_7_segment
 ---------------------------------------------------------------------------------
 (3) _display_7_segment                                   33    25      8    2423
                                             24 COMRAM     9     1      8
                                              0 BANK0     24    24      0
 ---------------------------------------------------------------------------------
 (2) _ClearLCDScreen                                       1     1      0      44
                                             25 COMRAM     1     1      0
                  _WriteCommandToLCD
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              1     1      0      44
                                             25 COMRAM     1     1      0
                    _ToggleEpinOfLCD
                  _WriteCommandToLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCommandToLCD                                    1     1      0      44
                                             24 COMRAM     1     1      0
                    _ToggleEpinOfLCD
 ---------------------------------------------------------------------------------
 (4) _ToggleEpinOfLCD                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 22    22      0      68
                                              2 COMRAM    22    22      0
                     _val_inPot_2Int
 ---------------------------------------------------------------------------------
 (6) _val_inPot_2Int                                       2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCDScreen
     _WriteCommandToLCD
       _ToggleEpinOfLCD
   _InitLCD
     _ToggleEpinOfLCD
     _WriteCommandToLCD
       _ToggleEpinOfLCD
   _RE1button
     _ClearLCDScreen
       _WriteCommandToLCD
         _ToggleEpinOfLCD
     _display_7_segment
   _check_correct_pass
   _delay_3_sec
     _display_7_segment
   _display120sec_Int
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _display_7_segment
   _display_7_segment
   _endLCD
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
   _enter_pin
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteDataToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
     _display120sec_Int
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _display_7_segment
     _num_to_char
   _first_message
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
   _init
   _next_char
   _next_char2
   _set_a_pin_message
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteDataToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
     _num_to_char
   _show_password
     _ClearLCDScreen
       _WriteCommandToLCD
         _ToggleEpinOfLCD
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteDataToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD
   _write_wait_20sec
     _WriteCommandToLCD
       _ToggleEpinOfLCD
     _WriteStringToLCD
       _WriteDataToLCD
         _ToggleEpinOfLCD

 _isr (ROOT)
   _val_inPot_2Int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      58       5       55.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     26      41       1       69.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      99      32        0.0%
DATA                 0      0      99       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 21 11:31:06 2018

        display120sec_Int@a1 0078          display120sec_Int@a2 007A          display120sec_Int@a3 007C  
        display120sec_Int@a4 007E          _counter_to_read_val 003F    __size_of_write_wait_20sec 0026  
                         l71 1F2A                           l72 1F16                          l232 1602  
                        l233 1646                          l251 2004                          l260 1CCE  
                        l245 1D56                          l333 177A                          l262 1D1C  
                        l246 1D32                          l334 17F0                          l263 1CF8  
                        l272 1E88                          l352 13B0                          l346 1CBA  
                        l362 147A                          l354 13EE                          l259 1CF2  
                        l355 145A                          l268 1EB8                          l276 1BF0  
                        l372 14F0                          l356 1406                          l277 1C66  
                        l367 1498                          l800 1E52                          l376 1554  
                        l368 1492                          l790 1DC4                          l785 1D9A  
                        l786 1D92                          l795 1E30                          l796 1E28  
                        l789 1DBA                          l799 1E48                          u970 15F4  
  __end_of_display120sec_Int 1B58                          u990 1646                          _isr 0008  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l2023 15D2                         l2033 15F4                         l2117 1EB8  
                       l2125 1E88                         l2281 1C72                         l2295 1CC0  
                       l1891 2004                         l2773 1502                         l2757 14AC  
                       l2783 153E                         l2767 14E8                         l2687 13C8  
                       l2679 13A0                         _ADIE 007CEE                         _ADIF 007CF6  
                       ?_isr 0001                         _ADON 007E10                         STR_1 1023  
                       STR_2 1012                         STR_3 1089                         STR_4 1001  
                       STR_5 1045                         STR_6 10B4                         STR_7 10AD  
                       STR_8 1095                         STR_9 10A1                         u1200 1CB0  
                       u1040 1EB4                         u1210 1CC0                         u2010 153E  
                       u1060 1E84                         u2107 1986                         u2027 13B6  
                       u2117 19A2                         u2037 1A2C                         _LATB 000F8A  
                       u2127 19BE                         u2047 1A56                         u2137 19D8  
                       u2057 1A80                         u2147 1FE4                         u2067 1AAA  
                       _LATH 000F90                         u2157 1FEE                         u2077 1FD4  
                       _LATJ 000F91                         u2087 195A                         u1711 1A06  
                       u2097 196A                         u1730 1D9E                         u1760 1E34  
                       u1840 13C8                         u1980 14E8                         _RBIE 007F93  
                       _RBIF 007F90                         _TMR0 000FD6                         _TMR1 000FCE  
     __size_of_first_message 0026                         _main 1396                         _init 155E  
                       fsr0h 000FEA                         fsr1h 000FE2                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0042                         isr@i 0017  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
            __end_of_InitLCD 19F6   __size_of_set_a_pin_message 008E                        ??_isr 0003  
         __size_of_RE1button 005E                        ?_main 0001                        ?_init 0001  
                      _ADRES 000FC3                        STR_10 100D                        STR_11 1056  
                      STR_12 1067                        STR_13 1034                        STR_14 1078  
                      _T0CON 000FD5                        _T1CON 000FCD                        _LATB2 007C52  
                      _LATB5 007C55                        _LATD4 007C64                        _LATD5 007C65  
                      _LATD6 007C66                        _LATD7 007C67                        _LATH0 007C80  
                      _LATH1 007C81                        _LATH2 007C82                        _LATH3 007C83  
             __CFG_DEBUG$OFF 000000              __end_of___lwdiv 1DCE              __end_of___lwmod 1E5C  
                      i2l301 1122                        i2l310 118E                        i2l320 1248  
                      i2l312 11CC                        i2l304 111E                        i2l313 11BA  
                      i2l330 134A                        i2l322 1270                        i2l314 11BC  
                      i2l306 121A                        i2l315 1210                        i2l307 1176  
                      i2l308 115C      __size_of_val_inPot_2Int 010C                        i2l326 12F6  
                      i2l318 1282                        i2l327 131C                        i2l319 1278  
                      i2l329 1342                        i2l290 1876                        i2l291 1890  
                      i2l292 18AA                        i2l293 18C4                        i2l285 180E  
                      i2l294 18DE                        i2l295 18F6                        i2l287 1828  
                      i2l288 1842                        i2l289 185C                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                        _PORTD 000F83  
                      _PORTE 000F84                        _PORTF 000F85                        _PORTG 000F86  
                      _PORTH 000F87                        _PORTJ 000F88                        _TRISA 000F92  
                      _TRISC 000F94                        _TRISE 000F96                        _TRISF 000F97  
                      _TRISG 000F98                        _TRISH 000F99                        _TRISJ 000F9A  
              __CFG_PWRT$OFF 000000               __CFG_FCMEN$OFF 000000                   _b6_pressed 020C  
                      main@i 0080              ??_show_password 001C                        init@i 0019  
             __pbitbssCOMRAM 0208               __CFG_BOREN$OFF 000000                        pclath 000FFA  
                      tablat 000FF5                        plusw1 000FE3                        plusw2 000FDB  
 __end_of_check_correct_pass 1CCA                        status 000FD8          display_7_segment@d0 0019  
        display_7_segment@d1 001B          display_7_segment@d2 001D          display_7_segment@d3 001F  
       __size_of_delay_3_sec 0054      __size_of_WriteDataToLCD 002C                        wtemp6 0043  
            _ToggleEpinOfLCD 1FE0              __initialization 1DCE                 __end_of_main 155E  
               __end_of_init 16C2                _counter_20sec 0098               __CFG_OSC$HSPLL 000000  
              _first_message 1F64                       ??_main 0026                       ??_init 0019  
           ??_ClearLCDScreen 001A                __activetblptr 000001   __size_of_display120sec_Int 00A0  
                     _ADCON0 000FC2                       _ADCON1 000FC1                       _ADCON2 000FC0  
                     i2l2171 1828                       i2l2165 180E                       i2l2351 11D4  
                     i2l2361 11F6                       i2l2349 11CC            __end_of_RE1button 1D28  
                     _TMR0IE 007F95                       _TMR0IF 007F92                       _TMR1IE 007CE8  
                     _TMR1IF 007CF0                       _TMR0ON 007EAF                       _TMR1ON 007E68  
                     _TRISB0 007C98                       _TRISB1 007C99                       _TRISB2 007C9A  
                     _TRISB3 007C9B                       _TRISB4 007C9C                       _TRISB5 007C9D  
                     _TRISB6 007C9E                       _TRISB7 007C9F                       _TRISE1 007CB1  
                     _TRISD4 007CAC                       _TRISD5 007CAD                       _TRISD6 007CAE  
                     _TRISD7 007CAF                       _TRISH4 007CCC                _cur_val_inPot 0039  
                  ??_InitLCD 001A               __CFG_XINST$OFF 000000             _write_wait_20sec 1F3E  
                     _endLCD 1F8A                    ??___lwdiv 001D                    ??___lwmod 0024  
             ?_first_message 0001                       clear_0 1DF4                       clear_1 1E02  
          WriteStringToLCD@s 001A                       _toggle 0209            ?_WriteStringToLCD 001A  
               ?_num_to_char 0019                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8           ??_WriteStringToLCD 001C  
    __end_of_ToggleEpinOfLCD 1FF6                   __accesstop 0060      __end_of__initialization 1E08  
              ___rparam_used 000001               __pcstackCOMRAM 0001                 __pidataBANK0 1FB0  
             _counter_120sec 0031               _val_inPot_2Int 17F4     WriteCommandToLCD@Command 0019  
                 _flag120sec 002F                   __pbssBANK0 0086           __size_of_enter_pin 0132  
             _WriteDataToLCD 1EBC              ??_first_message 001C        WriteDataToLCD@LCDChar 0019  
                    ?_endLCD 0001           __size_of_next_char 0030       __end_of_val_inPot_2Int 1900  
                 _isEnterPin 0208       __end_of_WriteDataToLCD 1EE8             ?_ToggleEpinOfLCD 0001  
                    _InitLCD 1900                      __Hparam 0000                      __Lparam 0000  
                  _ADC_timer 003B              __size_of_endLCD 0026                      ___lwdiv 1D7C  
                    ___lwmod 1E1A                 __psmallconst 1000           _check_correct_pass 1C6A  
            ?_val_inPot_2Int 0001                      __pcinit 1DCE                      __ramtop 1000  
          __end_of_enter_pin 17F4                      _isBlank 020B                      __ptext0 1396  
                    __ptext1 1F3E                      __ptext2 1BE6                      __ptext3 1B58  
                    __ptext4 1E5C                      __ptext5 1E8C                      __ptext6 155E  
                    __ptext7 1F64                      __ptext8 16C2                      __ptext9 1FF6  
               __size_of_isr 138E          ?_check_correct_pass 0019     __end_of_write_wait_20sec 1F64  
       __size_of_num_to_char 0014                ??_delay_3_sec 0022               __pintcode_body 10BC  
       end_of_initialization 1E08              ?_WriteDataToLCD 0001            __end_of_next_char 1EBC  
                 _next_char2 1E5C        __end_of_show_password 1C6A                      int_func 10BC  
       ??_check_correct_pass 001B                    _RE1button 1CCA                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc1 000FE6  
                    postinc2 000FDE                   _timer_1sec 0096            _display_7_segment 19F6  
                  _PORTBbits 000F81                    _PORTEbits 000F84           ?_display_7_segment 0019  
        ??_display_7_segment 0021    __size_of_WriteStringToLCD 002A          __end_of_delay_3_sec 1D7C  
                 ?_RE1button 0001    __end_of_display_7_segment 1AB8               __end_of_endLCD 1FB0  
        start_initialization 1DCE                  __end_of_isr 1396                 _entered_pass 0086  
    __size_of_ClearLCDScreen 0018                  ?_next_char2 0001                     ??_endLCD 001C  
              _sh_pass_count 009A                  __pdataBANK0 00A0             __CFG_LPT1OSC$OFF 000000  
              _sh_pass_timer 009C                  __pbssCOMRAM 0027                __pcstackBANK0 0060  
                _delay_3_sec 1D28                    _flag20sec 002D                     ?_InitLCD 0001  
                ??_RE1button 0022                    _blank_val 0027                    _diff_val2 0035  
           ___lwdiv@dividend 0019             ??_val_inPot_2Int 0003                    __pintcode 0008  
 __size_of_display_7_segment 00C2                     ?___lwdiv 0019                     ?___lwmod 0020  
      __end_of_first_message 1F8A          __size_of_next_char2 0030                  _blink_timer 003D  
                __smallconst 1000             ??_WriteDataToLCD 0019                    _enter_pin 16C2  
           ___lwdiv@quotient 001E            ?_write_wait_20sec 0001                 delay_3_sec@c 0024  
         ??_write_wait_20sec 001C                    _next_char 1E8C             _WriteStringToLCD 1F14  
                  _val_inPot 0033                     i2u110_40 1838                     i2u111_40 1852  
                   i2u112_40 186C                     i2u113_40 1886                     i2u114_40 18A0  
                   i2u115_40 18BA                     i2u116_40 18D4                     i2u108_40 1804  
                   i2u117_40 18EC                     i2u109_40 181E                     i2u134_40 11B2  
                   i2u137_40 11F6                     i2u147_40 12D6                     i2u148_40 12E6  
                   i2u149_40 12F6     __size_of_ToggleEpinOfLCD 0016                _pre_val_inPot 0037  
                 _ADCON0bits 000FC2                    main@i_627 0082                    main@i_628 0084  
              ??_num_to_char 001C                   ?_enter_pin 0001                  _INTCON2bits 000FF1  
                  copy_data0 1DE2               _ClearLCDScreen 1FC8                  _attempt_num 002B  
                  init@i_530 001B            _WriteCommandToLCD 1EE8                   ?_next_char 0001  
         ?_WriteCommandToLCD 0001             __size_of_InitLCD 00F6  __size_of_check_correct_pass 0060  
                   __Hrparam 0000                     __Lrparam 0000                 __Lsmallconst 1000  
        ??_WriteCommandToLCD 0019                 _password_int 008E             __size_of___lwdiv 0052  
           __size_of___lwmod 0042       __size_of_show_password 0084                  _line_toggle 020A  
                   _diff_val 009E              ___lwdiv@divisor 001B       __end_of_ClearLCDScreen 1FE0  
            ___lwdiv@counter 001D                     __ptext10 1AB8                     __ptext11 1E1A  
                   __ptext20 1FC8                     __ptext12 1D7C                     __ptext21 1900  
                   __ptext13 1F8A                     __ptext22 1EE8                     __ptext14 1F14  
                   __ptext23 1FE0                     __ptext15 1EBC                     __ptext16 1D28  
                   __ptext25 17F4                     __ptext17 1C6A                     __ptext18 1CCA  
                   __ptext19 19F6    __end_of_WriteCommandToLCD 1F14                 ??_next_char2 0019  
        __end_of_num_to_char 200A                __size_of_main 01C8                __size_of_init 0164  
                   _pin_full 020D                     int$flags 0042            _set_a_pin_message 1B58  
          ??_ToggleEpinOfLCD 0019           __end_of_next_char2 1E8C           ?_set_a_pin_message 0001  
   display_7_segment@symbols 0060                   _INTCONbits 000FF2                  ??_enter_pin 0025  
            ?_ClearLCDScreen 0001          ??_set_a_pin_message 001C                 ?_delay_3_sec 0001  
                   intlevel2 0000             ___lwmod@dividend 0020                _show_password 1BE6  
                ??_next_char 0019          check_correct_pass@i 001F    __end_of_set_a_pin_message 1BE6  
     display_7_segment@F5548 00A0     __end_of_WriteStringToLCD 1F3E              ___lwmod@divisor 0022  
            ___lwmod@counter 0024                  _num_to_char 1FF6            _display120sec_Int 1AB8  
         ?_display120sec_Int 0001   __size_of_WriteCommandToLCD 002C               ?_show_password 0001  
        ??_display120sec_Int 0025                 num_to_char@x 0019                 num_to_char@y 001B  
